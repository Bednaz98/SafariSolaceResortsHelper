{"version":3,"sources":["SafariSolaceStyleTools/colorstyle.ts","classes-interface/app-conext.tsx","SafariSolaceStyleTools/themecontext.tsx","SafariSolaceStyleTools/basicbutton.tsx","Components/pages/logoutButton.tsx","Components/children/nav-bar.tsx","SafariSolaceStyleTools/basictext.tsx","classes-interface/employeehandler.ts","Components/pages/clocking.tsx","SafariSolaceStyleTools/basicinputtext.tsx","SafariSolaceStyleTools/pixel-spacer.tsx","Components/pages/login.tsx","classes-interface/room-service-handler.ts","SafariSolaceStyleTools/basicmodal.tsx","Components/children/room-service-request.tsx","Components/pages/room-service.tsx","App.tsx"],"names":["Theme","Color","initContext","clockStatus","setClockStatus","user","undefined","setUser","appContext","createContext","themeContext","theme","setTheme","GetColor","colorType","useContext","Text","Button","Modal","InputText","B","C","D","E","F","BasicButton","props","onPress","title","View","style","padding","color","disabled","testID","key","LogoutButton","AsyncStorage","removeItem","setPage","NavBar","context","flexDirection","setPageIndex","isManager","TextType","employeeAPIHandler","dev","IndexURL","useURL","devMode","this","a","async","axios","get","getURL","response","data","id","filter","w","wId","type","post","username","password","patch","console","log","BasicText","text","Error","textType","General","getTextStyle","Title","fontSize","Header","ClockingScreen","useState","clockCheck","setClockCheck","handler","useEffect","getWorklogByID","clockin","clockout","BasicInputText","value","onChangeText","placeholder","keyboardType","editable","onChange","nativeEvent","eventCount","target","onContentSizeChange","contentSize","width","height","backgroundColor","TextInput","PixelSpacer","minHeight","minWidth","maxHeight","maxWidth","LoginPage","userName","setUserName","setPassword","employee","login","emp","setItem","JSON","stringify","alert","sortType","RoomServiceHandlerAPIHandler","All","newData","i","length","status","push","put","BasicModal","child","openTitle","show","setShow","styles","StyleSheet","create","modalView","margin","borderRadius","alignItems","shadowColor","shadowOffset","animationType","transparent","visible","onRequestClose","flex","justifyContent","marginTop","RoomServiceRequest","initServiceRequest","serviceRequest","SwitchButtonDisplay","SwitchStatusDisplay","GetOfferingString","tempString","requestedOffering","desc","error","dateDisplay","Date","created","room","toDateString","toLocaleTimeString","RoomService","setData","sort","setSort","grabServiceRequest","getAllRequest","foundRequest","Ordered","Processing","Completed","Cancelled","FlatList","keyExtractor","item","v4","renderItem","App","default","pageIndex","fname","lname","themeContextObject","container","Provider"],"mappings":"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","file":"static/js/app.5bd98f09.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\nimport { themeContext } from \"./themecontext\";\r\n\r\n\r\n\r\n\r\nexport enum Theme{\r\n    default,\r\n    other\r\n}\r\n\r\nexport enum Color{\r\n    Text,\r\n    Button,\r\n    Modal,\r\n    InputText,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F\r\n}\r\n\r\nexport default function GetColor(colorType:Color){\r\n    const context = useContext(themeContext);\r\n\r\n    switch(context.theme){\r\n        // case Theme.default:{\r\n        //     switch(colorType){\r\n        //         case Color.Text: { return ''}\r\n        //         case Color.Button: { return ''}\r\n        //         case Color.A: { return ''}\r\n        //         case Color.B: { return ''}\r\n        //         case Color.C: { return ''}\r\n        //         case Color.D: { return ''}\r\n        //         case Color.E: { return ''}\r\n        //         case Color.F: { return ''}\r\n        //         default:      { return ''}\r\n        //     }\r\n        // }\r\n        // case Theme.other:{\r\n        //     switch(colorType){\r\n        //         case Color.Text: { return ''}\r\n        //         case Color.Button: { return ''}\r\n        //         case Color.A: { return ''}\r\n        //         case Color.B: { return ''}\r\n        //         case Color.C: { return ''}\r\n        //         case Color.D: { return ''}\r\n        //         case Color.E: { return ''}\r\n        //         case Color.F: { return ''}\r\n        //         default:      { return ''}\r\n        //     }\r\n        // }\r\n        default:{\r\n            switch(colorType){\r\n                case Color.Text: { return ''}\r\n                case Color.Button: { return ''}\r\n                case Color.Modal: { return '#aaaaaa'}\r\n                case Color.InputText: { return '#aaaaaa'}\r\n                case Color.B: { return ''}\r\n                case Color.C: { return ''}\r\n                case Color.D: { return ''}\r\n                case Color.E: { return ''}\r\n                case Color.F: { return ''}\r\n                default:      { return ''}\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { createContext } from \"react\";\r\nimport { Employee } from \"./api-entities\";\r\n\r\n\r\n\r\nexport interface AppContextInterface{\r\n    clockStatus:boolean\r\n    setClockStatus:React.Dispatch<React.SetStateAction<boolean>>\r\n    user:Employee\r\n    setUser:React.Dispatch<React.SetStateAction<Employee>>\r\n\r\n}\r\n\r\n\r\nexport const initContext: AppContextInterface = {\r\n    clockStatus: false,\r\n    setClockStatus: ()=>{},\r\n    user: undefined,\r\n    setUser: ()=>{}\r\n}\r\n\r\nexport const appContext = createContext(initContext);","import { createContext, useContext } from \"react\";\r\nimport { Theme } from \"./colorstyle\";\r\n\r\n\r\n\r\n/**this interface is used for intellisense for the 'Theme' useContext*/\r\nexport interface ThemeContextInterface{\r\n    theme:Theme\r\n    setTheme:Function\r\n}\r\n\r\nexport const themeContextObject:ThemeContextInterface = {theme:0,setTheme:()=>{}}\r\n\r\n/**This is the global 'Theme' context*/\r\nexport const themeContext = createContext(themeContextObject)","import React from \"react\";\r\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\nexport default function BasicButton(props){\r\n    const {onPress, title} = props;\r\n\r\n    return(\r\n    <View style={{padding:3 }}>\r\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} // << main propers here\r\n        //Extra attributes added\r\n\r\n        disabled = { props.disabled} key={ props.key} testID={props.testID}\r\n        /*this is the close of the button tag*//> \r\n    </View>)\r\n}","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\nexport default  function LogoutButton(props){\r\n    return (\r\n        <View>\r\n            <BasicButton title={\"Logout\"} onPress={()=>{\r\n                AsyncStorage.removeItem(\"user\");\r\n                props.setPage(0);\r\n            }} />\r\n        </View>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { appContext } from \"../../classes-interface/app-conext\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport LogoutButton from \"../pages/logoutButton\";\r\n\r\n\r\n\r\n\r\n\r\nexport default function NavBar(props){\r\n    const context = useContext(appContext)\r\n\r\n    function ManagerOptions(props){\r\n        if(context.user.isManager){ \r\n            return (\r\n            <>\r\n                <BasicButton title={\"View Employee State\"} onPress={ ()=>{props.setPageIndex(4)}}/>\r\n                <BasicButton title={\"Review Problems\"} onPress={ ()=>{props.setPageIndex(5)}}/>\r\n            </>)}\r\n        else{return <></>}\r\n    }\r\n\r\n    return (\r\n    <View style={{flexDirection:\"row\"}}>\r\n        <BasicButton title={\"View Request\"} onPress={ ()=>{props.setPageIndex(1)}}/>\r\n        <BasicButton title={\"Manage Events\"} onPress={ ()=>{props.setPageIndex(2)}}/>\r\n        <BasicButton title={\"Time Sheet\"} onPress={ ()=>{props.setPageIndex(3)}}/>\r\n        < ManagerOptions setPageIndex={props.setPageIndex}/>\r\n        <LogoutButton setPage={props.setPageIndex}/>\r\n    </View>)\r\n}","import React from 'react'\r\nimport { View,Text } from 'react-native'\r\nimport GetColor, { Color } from './colorstyle'\r\n\r\n\r\n\r\n\r\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\r\nexport default function BasicText(props){\r\n    const {text} = props\r\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\r\n    //This will grab from the props the type of text for styling\r\n    // is not found, it will default to general text\r\n    const textType:TextType = props?.type ?? TextType.General\r\n    return (\r\n    <View style={{padding:3}}>\r\n        <Text style={getTextStyle(textType)}>{text}</Text>\r\n    </View>)\r\n}\r\n\r\n/**The type */\r\nexport enum TextType{\r\n    Title,\r\n    Header,\r\n    General\r\n}\r\nfunction getTextStyle(textType:TextType){\r\n    switch(textType){\r\n    case TextType.Title  :  {return {color:GetColor(Color.Text), fontSize:70}}\r\n    case TextType.Header :  {return {color:GetColor(Color.Text), fontSize:50}}\r\n    // The default case should be exactly the same as the general text as an edge case\r\n    case TextType.General:  {return {color:GetColor(Color.Text), fontSize:20}}\r\n    default              :  {return {color:GetColor(Color.Text), fontSize:20}}\r\n    //=================================================================================\r\n    }\r\n}","import axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { Employee, WorkLog } from \"./api-entities\";\r\nimport { appContext } from \"./app-conext\";\r\n\r\nexport interface EmployeeHandlerInterface{\r\n    /**gets all logs for manager*/\r\n    getWorklogs(): Promise<WorkLog>\r\n\r\n    getWorklogByID(id:number): Promise<WorkLog>\r\n\r\n    clockin(wId:number , type: string ): Promise<WorkLog>\r\n    \r\n    clockout(wId:number , type: string): Promise<WorkLog>\r\n    \r\n    login(username:string, password:string): Promise<Employee>\r\n    \r\n\r\n}\r\n\r\n\r\nexport default class employeeAPIHandler implements EmployeeHandlerInterface{\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    private IndexURL =0;\r\n    /* private context = useContext(appContext); */\r\n    //constructor\r\n    constructor(dev:boolean = false, IndexURL=1){\r\n        this.devMode=dev;\r\n        this.IndexURL=IndexURL\r\n    }\r\n    //////////////////////////////////////////////\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(!this.devMode){ return this.useURL} //postman mock\r\n        else return \"https://d52f8991-f077-4c37-a337-e3679d255a88.mock.pstmn.io\"\r\n    }\r\n\r\n    async getWorklogs() {\r\n        const response = await axios.get(this.getURL()+\"/worklogs\");\r\n        const data:WorkLog = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async getWorklogByID(id:number) {\r\n        const response = await axios.get(this.getURL()+\"/worklogs\");\r\n        const filter = response.data.filter(w => w.id === id);\r\n        const data:WorkLog = filter[0];\r\n        return data;\r\n    }\r\n    \r\n    async clockin(wId:number , type: string) {\r\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\r\n            wId:wId,\r\n            type:type\r\n        });\r\n        const data:WorkLog = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async clockout(wId:number , type: string) {\r\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\r\n            wId:wId,\r\n            type:type\r\n        });\r\n        const data:WorkLog = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async login(username:string, password:string) {\r\n        try {\r\n            const response = await axios.patch(this.getURL()+\"/login\",{\r\n                username:username,\r\n                password:password\r\n            });\r\n            const data:Employee = response.data;\r\n            return data;\r\n        } catch (error) {\r\n            console.log(\"Login failed\");\r\n        }\r\n}\r\n\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { appContext } from \"../../classes-interface/app-conext\";\r\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\n\r\n\r\n\r\nexport default function ClockingScreen(){\r\n    const context = useContext(appContext)\r\n\r\n    const [clockCheck, setClockCheck] = useState(false)\r\n    const handler = new employeeAPIHandler()\r\n    useEffect(() => {\r\n        syncClock()\r\n        return () => {}}, [])\r\n\r\n    async function syncClock(){\r\n        const workLog = await handler.getWorklogByID(context.user.id)\r\n        if(workLog.type == \"CHEKIN\" ){setClockCheck(true)}\r\n        else{setClockCheck(false)}\r\n    }\r\n\r\n    function changeClockText(){\r\n        if(clockCheck){return \"Clock Out\"}\r\n        else{return \"Clock-In\"}\r\n    }\r\n    \r\n    async function changClockStatus(){\r\n        setClockCheck(!clockCheck);\r\n        if(!clockCheck) await handler.clockin(context.user.id,\"Clock-In\")\r\n        else await handler.clockout(context.user.id,\"Clock-In\") \r\n    }\r\n\r\n    return(\r\n        <View>\r\n            <BasicText text={changeClockText()}/>\r\n            <BasicButton title={'Change Status'} onPress={changClockStatus}/>\r\n        </View>)\r\n\r\n}","import React from \"react\";\r\nimport { TextInput, View } from \"react-native\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\nexport default function BasicInputText(props){\r\n    const {value, onChangeText, placeholder} = props;\r\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\r\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\r\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\r\n    const keyboardType = props?.keyboardType ?? 'default';\r\n    const editable = props?.editable ?? true;\r\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\r\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\r\n\r\n    return(\r\n    <View style={{backgroundColor:GetColor(Color.InputText), padding:3}}> \r\n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \r\n    keyboardType={keyboardType} editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}/>\r\n    </View>)\r\n}\r\n","import React from \"react\"\r\nimport { View } from \"react-native\"\r\n\r\n\r\n/**this is a component for spacing elements with absolute pixels. @attribute height, width will default to 0. others include minWidth, maxWidth, minHight, maxHight*/\r\nexport default function PixelSpacer(props){\r\n    const height = props?.height ?? 0\r\n    const width = props?.width ?? 0\r\n    const {minHeight,minWidth,maxHeight,maxWidth} = props\r\n\r\n\r\n    return(<View style={{height:height, width:width, minHeight, minWidth, maxHeight, maxWidth}}/>)\r\n}","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { appContext, AppContextInterface } from \"../../classes-interface/app-conext\";\r\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\r\n\r\n\r\n\r\nexport default function LoginPage(props) {\r\n  const context: AppContextInterface = useContext(appContext)\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  async function tryLogin(props) {\r\n\r\n    const employee = new employeeAPIHandler(true);\r\n    \r\n    const response = await employee.login(userName, password);\r\n    const emp = response;\r\n    if(emp?.id){\r\n      context.setUser(emp);\r\n      await AsyncStorage.setItem(\"user\", JSON.stringify(emp));\r\n      setPage();\r\n    }\r\n    else {\r\n        alert(\"Login failed\");\r\n    }\r\n  }\r\n\r\n  function setPage(){\r\n    props.setPage(1);\r\n  }\r\n\r\n\r\n  return (\r\n    <View>\r\n      <BasicText\r\n        text={\"Welcome to Safari Solace Resorts\"}\r\n        textType={TextType.Title}\r\n      />\r\n      <PixelSpacer height={5} />\r\n      <BasicInputText\r\n        value={userName}\r\n        onChangeText={setUserName}\r\n        placeholder={\"Username\"}\r\n      />\r\n      <PixelSpacer height={5} />\r\n      <BasicInputText\r\n        value={password}\r\n        onChangeText={setPassword}\r\n        placeholder={\"Password\"}\r\n      />\r\n      <PixelSpacer height={5} />\r\n      <BasicButton title={\"Login\"} onPress={tryLogin} />\r\n    </View>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { ServiceRequest } from \"./api-entities\";\r\nimport { appContext } from \"./app-conext\";\r\n\r\n\r\nexport enum sortType {\r\n   Ordered ,\r\n   Processing,\r\n   Completed ,\r\n   Cancelled,\r\n   All\r\n}\r\n\r\nexport interface RoomServiceHandlerInterface{\r\n    /**sorting by type! All, completed, processing, ordered, canceled*/\r\n    getAllRequest(type:sortType): Promise<ServiceRequest[]>\r\n    markAsProcessed(id:string): Promise<ServiceRequest>\r\n    markAsCompleted(id:string) : Promise<ServiceRequest>\r\n}\r\n\r\nexport default class RoomServiceHandlerAPIHandler implements RoomServiceHandlerInterface{\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    private IndexURL =0;\r\n    //constructor\r\n    constructor(dev:boolean = false, IndexURL=1){\r\n        this.devMode=dev;\r\n        this.IndexURL=IndexURL\r\n    }\r\n    //////////////////////////////////////////////\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(!this.devMode){ return this.useURL} //postman mock\r\n        else return \"https://d52f8991-f077-4c37-a337-e3679d255a88.mock.pstmn.io\"\r\n\r\n    }\r\n    \r\n    async getAllRequest(type: sortType) {\r\n        const response = await axios.get(this.getURL()+\"/servicerequests\");\r\n        const data:ServiceRequest[] = response.data;\r\n        if(type == sortType.All){\r\n            return data;\r\n        }else{\r\n            let newData:ServiceRequest[] = [];\r\n            for(let i=0; i<data.length; i++){\r\n                if(data[i].status == sortType[type]){\r\n                    newData.push(data[i]);\r\n                }\r\n            }\r\n            return newData;\r\n        }\r\n    }\r\n\r\n    async markAsProcessed(id:string) {\r\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\r\n            status: \"Processing\"\r\n        });\r\n        const data:ServiceRequest = response.data;\r\n        return data;\r\n    }\r\n    async markAsCompleted(id:string) {\r\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\r\n            status: \"Completed\"\r\n        });\r\n        const data:ServiceRequest = response.data;\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const httpHandler1 = new  RoomServiceHandlerAPIHandler(false, 1);","import React, { useState } from \"react\";\r\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\r\nimport BasicButton from \"./basicbutton\";\r\nimport BasicText from \"./basictext\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\n\r\nexport default function BasicModal(props){\r\n  let child = props.child\r\n  const openTitle = props?.openTitle ?? \"null open title\"\r\n  \r\n\r\n  const [show, setShow] = useState(false);\r\n  const styles = StyleSheet.create({\r\n    modalView: {\r\n      flexDirection:\"column\",\r\n      margin: 20,\r\n      backgroundColor:GetColor(Color.Modal),\r\n      borderRadius: 20,\r\n      padding: 35,\r\n      alignItems: \"center\",\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 0\r\n      }\r\n  }\r\n});\r\n\r\n    return(\r\n      <View>\r\n        <Modal\r\n          animationType=\"slide\"\r\n          transparent={true}\r\n          visible={show}\r\n          onRequestClose={() => {setShow(!show)}}>\r\n          <View style={ {flex: 1, justifyContent: \"center\", alignItems: \"center\", marginTop: 22, backgroundColor:GetColor(Color.Modal)} }>\r\n            <View style={styles.modalView}>\r\n\r\n              <View>\r\n                {child}\r\n              </View>\r\n              <View>\r\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\r\n              </View>\r\n\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n\r\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\r\n\r\n      </View>)\r\n      \r\n}\r\n\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Offering, ServiceRequest } from \"../../classes-interface/api-entities\";\r\nimport RoomServiceHandlerAPIHandler from \"../../classes-interface/room-service-handler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\n\r\n\r\n\r\nexport default function RoomServiceRequest(props){\r\n    const initServiceRequest:ServiceRequest = props.serviceRequest\r\n    const [serviceRequest, setServiceRequest] = useState(initServiceRequest)\r\n\r\n\r\n    const handler = new RoomServiceHandlerAPIHandler()\r\n    \r\n\r\n    function SwitchButtonDisplay(){\r\n        if(serviceRequest.status == \"Ordered\" )          return <BasicButton title={' Start Order'} onPress={()=>{ /*handler.markAsProcessed(serviceRequest.id);*/ }} />\r\n        else if(serviceRequest.status ==  \"Processing\" ) return <BasicButton title={' Mark order as complete'} onPress={()=>{ /*handler.markAsCompleted(serviceRequest.id);*/ }} />\r\n        else                                             return <></>\r\n    }\r\n\r\n    function SwitchStatusDisplay(){\r\n        return(<View style={{flexDirection:\"row\"}}>\r\n            <BasicText text={\"Status\"}/><BasicText text={serviceRequest?.status ?? \"Ordered\"}/><SwitchButtonDisplay/>\r\n        </View>)\r\n    }\r\n\r\n    function GetOfferingString(){\r\n        let tempString:string= '';\r\n        try {\r\n            if(serviceRequest.requestedOffering?.length <1){return 'In valid request in the system'}\r\n            for(let i =0; i < serviceRequest.requestedOffering.length; i ++){\r\n                if(i==0){tempString+= `\\t-${serviceRequest.requestedOffering[i].desc}`;}\r\n                else{tempString+= `\\n\\t-${serviceRequest.requestedOffering[i].desc}`;}\r\n            }\r\n            if(!tempString) return 'In valid request in the system'\r\n            return 'Hello'\r\n        } catch (error) {\r\n            return 'In valid request in the system'\r\n        }\r\n    }\r\n\r\n\r\n    function RequestDisplay(){\r\n        const dateDisplay = (new Date(serviceRequest.created))\r\n        return(\r\n        <>\r\n            <BasicText text={`Room: ${serviceRequest.room}`}/>\r\n            <BasicText text={`Created: ${dateDisplay.toDateString()}, at ${dateDisplay.toLocaleTimeString()}`}/>\r\n            <View><BasicText text={'Requested Offerings:'}/><BasicText text={GetOfferingString()}/></View>\r\n            <SwitchStatusDisplay/>\r\n        </>)\r\n    }\r\n\r\n    return(\r\n    <>\r\n        <BasicModal openTitle ={(props?.openTitle ?? \"null open title\")} child={<RequestDisplay/>}/>\r\n    </>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { FlatList, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\nimport RoomServiceRequest from \"../children/room-service-request\";\r\nimport {Offering, ServiceRequest} from '../../classes-interface/api-entities';\r\nimport RoomServiceHandlerAPIHandler, { sortType } from \"../../classes-interface/room-service-handler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\n\r\n\r\n\r\n\r\nexport default function RoomService(){\r\n\r\n    const dummyArray:ServiceRequest[] = []\r\n    const [data, setData] = useState(dummyArray);\r\n    const [sort, setSort] = useState(sortType.All)\r\n    const handler = new RoomServiceHandlerAPIHandler(true)\r\n    \r\n\r\n    useEffect(() => {\r\n        grabServiceRequest(sortType.All)\r\n    \r\n      return () => {\r\n        \r\n      }\r\n    }, [])\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    async function grabServiceRequest(type:sortType){\r\n    try {\r\n            const foundRequest = await handler.getAllRequest(type);\r\n            console.log(foundRequest)\r\n            if(foundRequest) {setData([]);setData(foundRequest);setSort(type)}\r\n        } catch (error) {\r\n            console.log('Failed to sort request')\r\n        }\r\n    }\r\n\r\n   function DisplaySortType(){\r\n       return <BasicText text={`Filtering Type: ${sortType[sort]}`}/>\r\n   }\r\n\r\n   function FilterButtons(){\r\n    return <View style={{flexDirection:\"row\"}}>\r\n        <BasicButton title={'All'} onPress={()=> grabServiceRequest(sortType.All)} />\r\n        <BasicButton title={'Ordered'} onPress={()=> grabServiceRequest(sortType.Ordered)} />\r\n        <BasicButton title={'Processing'} onPress={()=> grabServiceRequest(sortType.Processing)} />\r\n        <BasicButton title={'Complete'} onPress={()=> grabServiceRequest(sortType.Completed)} />\r\n        <BasicButton title={'Cancelled'} onPress={()=> grabServiceRequest(sortType.Cancelled)} />\r\n    </View>\r\n   }\r\n\r\n   \r\n/*       function Testing(){\r\n        let testStack:ServiceRequest[] =[]\r\n        for(let i =0; i <10; i++ ){\r\n            let dummyOffering:Offering={\r\n                desc: \"Testing\",\r\n                cost: 0\r\n            }\r\n            const T = \"Completed\"\r\n            let dummy:ServiceRequest = {\r\n                id: `EXRoom${i}`,\r\n                room: `EXRoom${i}`,\r\n                created: (Math.random()*100000000),\r\n                status: T ,\r\n                requestedOffering: [dummyOffering,dummyOffering,dummyOffering]\r\n            }\r\n\r\n            testStack.push( dummy )\r\n        }\r\n        setData(testStack);\r\n    } */\r\n\r\n    function DisplaySwitch(){\r\n        if(data?.length >0){\r\n            return <FlatList\r\n            data={data}\r\n            keyExtractor={(item) => v4()}\r\n            renderItem={({ item }) => { return (<RoomServiceRequest  openTitle = {`Room: ${item?.room ?? 'Invalid'}, ${item?.status ?? 'Invalid'}`} serviceRequest={item}    /> ); } }\r\n        />\r\n        }\r\n        else return <BasicText text={`No request found for ${sortType[sort]}`}/>\r\n    }\r\n    //grabServiceRequest(sort)\r\n\r\n    return(\r\n    <View>\r\n        <BasicText text={\"Room Service Request\"}/>\r\n        <DisplaySortType/>\r\n        <FilterButtons />\r\n        <BasicButton title={'Refresh'} onPress={()=>{grabServiceRequest(sort)}} />\r\n        <DisplaySwitch />\r\n        \r\n\r\n\r\n    </View>)\r\n}\r\n","import React, { useState } from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { Employee } from './classes-interface/api-entities';\r\nimport { appContext, AppContextInterface } from './classes-interface/app-conext';\r\nimport NavBar from './Components/children/nav-bar';\r\nimport ClockingScreen from './Components/pages/clocking';\r\nimport LoginPage from './Components/pages/login';\r\nimport RoomService from './Components/pages/room-service';\r\nimport BasicText from './SafariSolaceStyleTools/basictext';\r\nimport { Theme } from './SafariSolaceStyleTools/colorstyle';\r\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\r\n\r\nexport default function App() {\r\n\r\n  const [theme, setTheme] = useState(Theme.default);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [clockStatus, setClockStatus] = useState(false)\r\n  const dummyEmployee:Employee = {id: 0,isManager: false,fname: '',lname: '',username: '',password: ''}\r\n  const [user, setUser] = useState(dummyEmployee)\r\n\r\n  const initContext:AppContextInterface = {\r\n    clockStatus,\r\n    setClockStatus,\r\n    user,\r\n    setUser,\r\n  }\r\n  const themeContextObject:ThemeContextInterface = {theme:theme,setTheme:setTheme}\r\n\r\n  function SwitchPage(){\r\n    switch(pageIndex){\r\n\r\n      //================================================================================================\r\n      case    /*login*/           0:{return (<> <LoginPage setPage={setPageIndex}/> </>)}\r\n      case    /*room service*/    1:{return (<> <NavBar setPageIndex={setPageIndex} /><RoomService/> </>)}\r\n      case    /*event*/           2:{return (<> <NavBar setPageIndex={setPageIndex} /><BasicText text={'Testing'}/> </>)}\r\n      case    /*check in*/        3:{return (<> <NavBar setPageIndex={setPageIndex} /><ClockingScreen/></>)}\r\n      case    /*status check*/    4:{return (<> <NavBar setPageIndex={setPageIndex} /><BasicText text={'Testing'}/> </>)}\r\n      case    /*problem*/         5:{return (<> <NavBar setPageIndex={setPageIndex} /><BasicText text={'Testing'}/> </>)}\r\n      //================================================================================================\r\n      case    /*kris*/            6:{return (<> <BasicText text={'kris'}/>    </>)}\r\n      case    /*john*/            7:{return (<> <RoomService/> </>)}\r\n      case    /*brandon*/         8:{return (<> <BasicText text={'brandon'}/> </>)}\r\n      case    /*josh*/            9:{return (<> <BasicText text={'josh'}/>    </>)} \r\n      default                      :{return (<> <BasicText text={'Testing'}/> </>)}\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <appContext.Provider value = {initContext}>\r\n        <themeContext.Provider value = { themeContextObject }>\r\n          <SwitchPage/>\r\n        </themeContext.Provider>\r\n      </appContext.Provider>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#444',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"sourceRoot":""}