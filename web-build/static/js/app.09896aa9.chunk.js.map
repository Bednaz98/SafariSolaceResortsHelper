{"version":3,"sources":["assets/Sale.png","SafariSolaceStyleTools/styleconfig.ts","classes-interface/app-conext.tsx","SafariSolaceStyleTools/themecontext.tsx","SafariSolaceStyleTools/basicbutton.tsx","SafariSolaceStyleTools/basicmodal.tsx","Components/pages/logoutButton.tsx","Components/children/nav-bar.tsx","SafariSolaceStyleTools/basictext.tsx","classes-interface/employeehandler.ts","Components/pages/clocking.tsx","classes-interface/eventhandler.ts","SafariSolaceStyleTools/basicinputtext.tsx","Components/children/create-event-option.tsx","Components/children/update-allEvents-state.tsx","Components/children/event-date-formatting.tsx","Components/children/format-single-event.tsx","Components/children/get-event-by-ID.tsx","Components/pages/events-page.tsx","SafariSolaceStyleTools/flex-spacer.tsx","SafariSolaceStyleTools/pixel-spacer.tsx","Components/pages/login.tsx","classes-interface/problemhandler.ts","Components/children/problem-item.tsx","Components/pages/problem-view.tsx","classes-interface/room-service-handler.ts","Components/children/room-service-request.tsx","Components/pages/room-service.tsx","Components/pages/view-employee-status.tsx","App.tsx"],"names":["module","exports","Theme","Color","initContext","clockStatus","setClockStatus","user","undefined","setUser","appContext","createContext","themeContext","theme","setTheme","GetColor","colorType","returnColor","useContext","light","Text","textHeader","textTitle","Button","InputText","ModalBackground","ModalInner","primaryColor","SecondaryColor","TertiaryColor","dark","hacker","Platform","OS","shadowRadius","borderRadius","paddingRadius","margin","BasicButton","props","onPress","title","View","style","backgroundColor","padding","color","disabled","testID","key","BasicModal","child","openTitle","useState","show","setShow","styles","StyleSheet","create","modalView","flexDirection","flex","alignContent","justifyContent","alignItems","shadowColor","shadowOffset","width","height","Modal","animationType","transparent","visible","onRequestClose","borderWidth","LogoutButton","AsyncStorage","removeItem","setPage","NavBar","context","ManagerOptions","console","log","isManager","setPageIndex","alignSelf","TextType","employeeAPIHandler","dev","IndexURL","useURL","devMode","this","a","async","axios","get","getURL","response","data","id","filter","w","wId","type","post","username","password","patch","BasicText","text","Error","textType","textColor","textAlign","fontSize","getTextFontSize","getAlignment","tempAlign","Title","Header","General","ClockingScreen","clockCheck","setClockCheck","handler","useEffect","getWorklogByID","clockin","clockout","EventAPIHandler","put","status","event","BasicInputText","value","onChangeText","placeholder","keyboardType","editable","onChange","nativeEvent","eventCount","target","onContentSizeChange","contentSize","TextInput","CreateEventOption","setTitle","desc","setDesc","Date","date","setDate","showDateAndTime","setShowDateAndTime","showDatePicker","setShowDatePicker","showStartTimePicker","setShowStartTimePicker","showEndTimePicker","setShowEndTimePicker","getHours","setHours","startTime","setStart","endTime","setEnd","startAntePost","endAntePost","location","setLocation","RenderStartTime","mode","is24Hour","display","selectedTime","toLocaleTimeString","RenderEndTime","RenderDate","selectedDate","DateAndTime","inputFieldsProps","createEventStates","allEvents","setAllEvents","toDateString","slice","newEvent","push","UpdateAllEventsState","FormattedTime","time","toLocaleString","hours","AMorPM","GetDateFromNum","num","toUTCString","FormatSingleEvent","startTimeToDate","endTimeToDate","startTimeFormatted","endTimeFormatted","index","newEventList","map","CancelEvent","GetEventByID","eventID","setEventID","setFilteredEventID","EventsPage","eventhandle","filteredEventID","getAllEvents","events","setAll","formattedEvents","ScrollView","FlexSpacer","space","PixelSpacer","minHeight","minWidth","maxHeight","maxWidth","LoginPage","tryLogin","userName","employee","login","emp","alert","setUserName","setPassword","t","Dimensions","ProblemAPIHandler","ProblemItem","submittedTime","photoLink","setReviewed","markReviewed","window","href","ProblemView","problemList","problemItems","p","sortType","RoomServiceHandlerAPIHandler","All","newData","i","length","RoomServiceRequest","initServiceRequest","serviceRequest","SwitchButtonDisplay","SwitchStatusDisplay","GetOfferingString","tempString","requestedOffering","error","dateDisplay","created","room","RoomService","setData","sort","setSort","displayList","setDisplayList","grabServiceRequest","getAllRequest","foundRequest","displaySwitch","item","v4","Ordered","Processing","Completed","Cancelled","ViewEmployeeStatus","worklogsState","setWorkLogs","LinkEmployee","worklogID","fname","lname","find","timestamp","loglist","worklog","App","default","pageIndex","themeContextObject","isWeb","getLS","container","SafeAreaView","Provider","Image","source","require"],"mappings":"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","file":"static/js/app.09896aa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sale.c1fdc2f5.png\";","import { useContext } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { themeContext } from \"./themecontext\";\r\n\r\nexport enum Theme{\r\n    default,\r\n    light,\r\n    dark,\r\n    hacker\r\n}\r\n\r\nexport enum Color{\r\n    Text,\r\n    textHeader,\r\n    textTitle,\r\n    Button,\r\n    ModalBackground,\r\n    ModalInner,\r\n    InputText,\r\n    primaryColor,\r\n    SecondaryColor,\r\n    TertiaryColor,\r\n}\r\n\r\nexport default function GetColor(colorType:Color){\r\n    const context = useContext(themeContext);\r\n    let returnColor = '#ffffff'\r\n\r\n    switch(context.theme){\r\n        case Theme.light:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = '#E6B566' ; break}\r\n                case Color.textHeader: { returnColor = '#E6B566' ; break}\r\n                case Color.textTitle: { returnColor = '#E6B566' ; break}\r\n                case Color.Button: { returnColor = '#E5707E' ; break}\r\n                case Color.InputText: { returnColor ='#E5707E'; break}\r\n                case Color.ModalBackground: { returnColor = '#A3DDCB'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor = '#A3DDCB' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#E8E9A1'; break}\r\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n        case Theme.dark:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = '#2D4263' ; break}\r\n                case Color.textHeader: { returnColor = '#2D4263' ; break}\r\n                case Color.textTitle: { returnColor = '#2D4263' ; break}\r\n                case Color.Button: { returnColor = '#C84B31' ; break}\r\n                case Color.InputText: { returnColor ='#C84B31'; break}\r\n                case Color.ModalBackground: { returnColor = '#191919'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor = '#191919' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#191919' ; break}\r\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n        case Theme.hacker:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = '#14f074' ; break}\r\n                case Color.textHeader: { returnColor = '#14f074'  ; break}\r\n                case Color.textTitle: { returnColor = '#14f074'  ; break}\r\n                case Color.Button: { returnColor = '#0c833d' ; break}\r\n                case Color.InputText: { returnColor ='#0c833d'; break}\r\n                case Color.ModalBackground: { returnColor = '#0c833d'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor ='#063335' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#063335' ; break}\r\n                case Color.TertiaryColor: { returnColor = '#13993b' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n        default:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = 'ivory' ; break}\r\n                case Color.textHeader: { returnColor = 'ivory' ; break}\r\n                case Color.textTitle: { returnColor = 'ivory' ; break}\r\n                case Color.Button: { returnColor = 'chocolate' ; break}\r\n                case Color.InputText: { returnColor ='linen'; break}\r\n                case Color.ModalBackground: { returnColor = '#96D65E'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor = '#333' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#5B995A' ; break}\r\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n    }\r\n    if(Platform.OS == \"android\"){ return `${returnColor }`}\r\n    else return returnColor \r\n\r\n}\r\n\r\n\r\nexport function shadowRadius(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 5}\r\n        case Theme.dark:    {return 5}\r\n        case Theme.hacker:  {return 1}\r\n        default:            {return 5}\r\n    }\r\n\r\n}\r\n\r\nexport function borderRadius(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 10}\r\n        case Theme.dark:    {return 10}\r\n        case Theme.hacker:  {return 0}\r\n        default:            {return 10}\r\n    }\r\n\r\n}\r\n\r\nexport function paddingRadius(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 5}\r\n        case Theme.dark:    {return 5}\r\n        case Theme.hacker:  {return 0}\r\n        default:            {return 5}\r\n    }\r\n}\r\n\r\nexport function margin(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 5}\r\n        case Theme.dark:    {return 5}\r\n        case Theme.hacker:  {return 2}\r\n        default:            {return 5}\r\n    }\r\n}\r\n","import { createContext } from \"react\";\r\nimport { Employee } from \"./api-entities\";\r\n\r\n\r\n\r\nexport interface AppContextInterface{\r\n    clockStatus:boolean\r\n    setClockStatus:React.Dispatch<React.SetStateAction<boolean>>\r\n    user:Employee\r\n    setUser:React.Dispatch<React.SetStateAction<Employee>>\r\n\r\n}\r\n\r\n\r\nexport const initContext: AppContextInterface = {\r\n    clockStatus: false,\r\n    setClockStatus: ()=>{},\r\n    user: undefined,\r\n    setUser: ()=>{}\r\n}\r\n\r\nexport const appContext = createContext(initContext);","import { createContext, useContext } from \"react\";\r\nimport { Theme } from \"./styleconfig\";\r\n\r\n\r\n\r\n/**this interface is used for intellisense for the 'Theme' useContext*/\r\nexport interface ThemeContextInterface{\r\n    theme:Theme\r\n    setTheme:Function\r\n}\r\n\r\nexport const themeContextObject:ThemeContextInterface = {theme:0, setTheme:()=>{}}\r\n\r\n/**This is the global 'Theme' context*/\r\nexport const themeContext = createContext(themeContextObject)","import React from \"react\";\r\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, Platform, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius, shadowRadius } from \"./styleconfig\";\r\nimport PixelSpacer from \"./pixel-spacer\";\r\nimport { platform } from \"os\";\r\n\r\n\r\nexport default function BasicButton(props){\r\n    const {onPress, title} = props;\r\n    function getViewStyle(){\r\n        if(Platform.OS == \"web\") { return {margin:margin(), backgroundColor:GetColor(Color.Button), padding: paddingRadius(), borderRadius:borderRadius(),shadowRadius:shadowRadius()}}\r\n        else{return {margin:margin(), padding: paddingRadius(), borderRadius:borderRadius(),shadowRadius:shadowRadius()}}\r\n    }\r\n    \r\n\r\n    return(\r\n    <View style={getViewStyle()}>\r\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} \r\n        disabled = { props.disabled} key={ props.key} testID={props.testID}/> \r\n    </View>)\r\n}","import React, { useState } from \"react\";\r\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\r\nimport BasicButton from \"./basicbutton\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"./styleconfig\";\r\nimport FlexSpacer from \"./flex-spacer\";\r\nimport PixelSpacer from \"./pixel-spacer\";\r\n\r\n\r\n\r\nexport default function BasicModal(props){\r\n  let child = props.child\r\n  const openTitle = props?.openTitle ?? \"null open title\"\r\n  \r\n\r\n  const [show, setShow] = useState(false);\r\n  const styles = StyleSheet.create({\r\n    modalView: {\r\n      flexDirection:\"column\",\r\n      flex:1,\r\n      alignContent:\"center\", justifyContent:\"center\",alignItems:\"center\",\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 0\r\n      }\r\n  }\r\n});\r\n\r\n    return(\r\n      <View>\r\n        <View style={{alignItems:\"center\", justifyContent:\"center\"}}>\r\n          {/* Main Modal  */}\r\n          <Modal\r\n            animationType=\"slide\"\r\n            transparent={true}\r\n            visible={show}\r\n            onRequestClose={() => {setShow(!show)}}>\r\n            <View style={ styles.modalView}>\r\n              <View style={{ margin:margin(),padding:paddingRadius(), borderRadius:borderRadius(), backgroundColor:GetColor(Color.ModalBackground), borderWidth:5}}>\r\n                  {child}\r\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\r\n              </View>\r\n            </View>\r\n          </Modal>\r\n          {/* Main Modal  */}\r\n        </View>\r\n\r\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\r\n\r\n      </View>)\r\n      \r\n}\r\n\r\n\r\n\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\nexport default  function LogoutButton(props){\r\n    return (\r\n        <View>\r\n            <BasicButton title={\"Logout\"} onPress={()=>{\r\n                AsyncStorage.removeItem(\"user\");\r\n                props.setPage(0);\r\n            }} />\r\n        </View>\r\n    )\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\nimport { appContext } from \"../../classes-interface/app-conext\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\nimport LogoutButton from \"../pages/logoutButton\";\r\n\r\n\r\n\r\n\r\n\r\nexport default function NavBar(props){\r\n    const context = useContext(appContext)\r\n\r\n    function ManagerOptions(props){\r\n        console.log(context.user.isManager);\r\n        if(context.user.isManager){ \r\n            return (\r\n            <>\r\n                <View><BasicButton title={\"View Employee Status\"} onPress={ ()=>{props.setPageIndex(4)}}/></View>\r\n                <View ><BasicButton title={\"Review Problems\"} onPress={ ()=>{props.setPageIndex(5)}}/></View>\r\n            </>)}\r\n        else{return <></>}\r\n    }\r\n\r\n    if(Platform.OS == \"web\"){\r\n        return (\r\n            <View style={{flexDirection:\"row\", alignSelf:\"stretch\",justifyContent:\"center\"}}>\r\n                <View><BasicButton title={\"View Request\"} onPress={ ()=>{props.setPageIndex(1)}}/></View>\r\n                <View ><BasicButton title={\"Manage Events\"} onPress={ ()=>{props.setPageIndex(2)}}/></View>\r\n                <View ><BasicButton title={\"Time Sheet\"} onPress={ ()=>{props.setPageIndex(3)}}/></View>\r\n                < ManagerOptions setPageIndex={props.setPageIndex}/>\r\n                <View ><LogoutButton setPage={props.setPageIndex}/></View>\r\n            </View>)\r\n    }\r\n    else{\r\n        return (\r\n                <BasicModal openTitle={\"Navigation\"} child={\r\n                <View style={{flexDirection:\"column\", alignSelf:\"stretch\",justifyContent:\"center\"}}>\r\n                    <View ><BasicButton title={\"View Request\"} onPress={ ()=>{props.setPageIndex(1)}}/></View>\r\n                    <View ><BasicButton title={\"Manage Events\"} onPress={ ()=>{props.setPageIndex(2)}}/></View>\r\n                    <View ><BasicButton title={\"Time Sheet\"} onPress={ ()=>{props.setPageIndex(3)}}/></View>\r\n                    < ManagerOptions setPageIndex={props.setPageIndex}/>\r\n                    <View ><LogoutButton setPage={props.setPageIndex}/></View>\r\n                </View>\r\n                }/>\r\n            )\r\n    }\r\n\r\n}","import React from 'react'\r\nimport { View,Text, Platform } from 'react-native'\r\nimport GetColor, { Color } from './styleconfig'\r\n\r\n\r\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\r\nexport default function BasicText(props){\r\n    const {text} = props\r\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\r\n    //This will grab from the props the type of text for styling\r\n    // is not found, it will default to general text\r\n    const textType:TextType = props.textType\r\n    let textColor = Color.Text\r\n    let textAlign:string = \"auto\";\r\n    if(props?.textAlign) {textAlign =props?.textAlign  }\r\n    return (\r\n    <View style={{margin:5}}>\r\n        <Text style={{color:GetColor(textColor), fontSize:getTextFontSize(textType),textAlign:getAlignment(textAlign,textType) }}>{text}</Text>\r\n    </View>)\r\n}\r\n\r\n\r\n\r\n/**The type */\r\nexport enum TextType{\r\n    Title,\r\n    Header,\r\n    General\r\n}\r\nfunction getAlignment(textAlign:string,textType:TextType){\r\n    const tempAlign = textAlign ?? \"auto\"\r\n    switch(textType){\r\n        case TextType.Title:{return \"center\"}\r\n        case TextType.Header:{return \"center\"}\r\n        case TextType.General:{return tempAlign}\r\n        default : {return tempAlign}\r\n\r\n    }\r\n}\r\n\r\nfunction getTextFontSize(textType:TextType){\r\n    if(Platform.OS == \"web\"){\r\n        switch(textType){\r\n            case TextType.Title  :  {return 50}\r\n            case TextType.Header:  {return 30}\r\n            case TextType.General:  {return 20}\r\n            // The default case should be exactly the same as the general text as an edge case\r\n            default              :  {return 20}\r\n            }\r\n    }\r\n    else{\r\n        switch(textType){\r\n            case TextType.Title  :  {return 30}\r\n            case TextType.Header:  {return 20}\r\n            case TextType.General:  {return 10}\r\n            default              :  {return 10}\r\n        }\r\n    }\r\n}","import axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { Employee, WorkLog } from \"./api-entities\";\r\nimport { appContext } from \"./app-conext\";\r\n\r\nexport interface EmployeeHandlerInterface{\r\n    /**gets all logs for manager*/\r\n    getWorklogs(): Promise<WorkLog[]>\r\n\r\n    getWorklogByID(id:number): Promise<WorkLog>\r\n\r\n    clockin(wId:number , type: string ): Promise<WorkLog>\r\n    \r\n    clockout(wId:number , type: string): Promise<WorkLog>\r\n    \r\n    login(username:string, password:string): Promise<Employee>\r\n    \r\n\r\n}\r\n\r\n\r\nexport default class employeeAPIHandler implements EmployeeHandlerInterface{\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    private IndexURL =0;\r\n    /* private context = useContext(appContext); */\r\n    //constructor\r\n    constructor(dev:boolean = false, IndexURL=1){\r\n        this.devMode=dev;\r\n        this.IndexURL=IndexURL\r\n    }\r\n    //////////////////////////////////////////////\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(!this.devMode){ return this.useURL} //postman mock\r\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\r\n    }\r\n\r\n    async getWorklogs() {\r\n        const response = await axios.get(this.getURL()+\"/worklogs\");\r\n        const data:WorkLog[] = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async getWorklogByID(id:number) {\r\n        const response = await axios.get(this.getURL()+\"/worklogs\");\r\n        const filter = response.data.filter(w => w.id === id);\r\n        const data:WorkLog = filter[0];\r\n        return data;\r\n    }\r\n    \r\n    async clockin(wId:number , type: string) {\r\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\r\n            wId:wId,\r\n            type:type\r\n        });\r\n        const data:WorkLog = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async clockout(wId:number , type: string) {\r\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\r\n            wId:wId,\r\n            type:type\r\n        });\r\n        const data:WorkLog = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async login(username:string, password:string) {\r\n        try {\r\n            const response = await axios.patch(this.getURL()+\"/login\",{\r\n                username:username,\r\n                password:password\r\n            });\r\n            const data:Employee = response.data;\r\n            return data;\r\n        } catch (error) {\r\n            console.log(\"Login failed\");\r\n        }\r\n}\r\n\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { appContext } from \"../../classes-interface/app-conext\";\r\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\";\r\n\r\n\r\n\r\n\r\nexport default function ClockingScreen(){\r\n    const context = useContext(appContext)\r\n\r\n    const [clockCheck, setClockCheck] = useState(false)\r\n    const handler = new employeeAPIHandler()\r\n    useEffect(() => {\r\n        syncClock()\r\n        return () => {}}, [])\r\n\r\n    async function syncClock(){\r\n        const workLog = await handler.getWorklogByID(context.user.id)\r\n        if(workLog.type == \"CHEKIN\" ){setClockCheck(true)}\r\n        else{setClockCheck(false)}\r\n    }\r\n\r\n    function changeClockText(){\r\n        if(clockCheck){return \"Clock Out\"}\r\n        else{return \"Clock-In\"}\r\n    }\r\n    \r\n    async function changClockStatus(){\r\n        setClockCheck(!clockCheck);\r\n        if(!clockCheck) await handler.clockin(context.user.id,\"Clock-In\")\r\n        else await handler.clockout(context.user.id,\"Clock-In\") \r\n    }\r\n\r\n    return(\r\n        <View style={{borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), backgroundColor:GetColor(Color.SecondaryColor)}}>\r\n            <BasicText text={\"Clock Status\"} textType={TextType.Title}/>\r\n            <BasicText text={changeClockText()} textType={TextType.Header} textAlign={\"center\"}/>\r\n            <BasicButton title={'Change Status'} onPress={changClockStatus}/>\r\n        </View>)\r\n\r\n}","import axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { Event } from \"./api-entities\";\r\nimport { appContext } from \"./app-conext\";\r\n\r\n\r\n\r\nexport interface EventHandlerInterface{\r\n    getAllEvents(): Promise<Event[]>      \r\n    /**put -> cancel*/\r\n    cancelEvent(id:string): Promise<Event>\r\n    /**put -> update*/\r\n    updateEvent(id:string, event:Event): Promise<Event>\r\n    /**post -> create*/\r\n    createEvent(event:Event): Promise<Event>\r\n\r\n    getEventByID(id: string): Promise<Event>\r\n\r\n}\r\n\r\n\r\nexport default class EventAPIHandler implements EventHandlerInterface{\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    private IndexURL = 0;\r\n    //private context = useContext(appContext);\r\n    \r\n    //constructor\r\n    constructor(dev:boolean = false, IndexURL=1){\r\n        this.devMode=dev;\r\n        this.IndexURL=IndexURL\r\n    }\r\n\r\n    //////////////////////////////////////////////\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(!this.devMode){ return this.useURL} //postman mock\r\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\r\n    }\r\n\r\n    async getAllEvents(): Promise<Event[]> {\r\n        const response = await axios.get(this.getURL()+\"/events\");\r\n        const data:Event[] = response.data;\r\n        return data;    \r\n    }\r\n    \r\n    async cancelEvent(id:string) {\r\n        const response = await axios.put(this.getURL()+\"/events\",\r\n        {\r\n            id:id,\r\n            status:\"Cancelled\"\r\n        });\r\n        const data:Event = response.data;\r\n        return data;\r\n        }\r\n        \r\n    async createEvent(event:Event) {\r\n        const response = await axios.post(this.getURL()+\"/events\",event);\r\n        const data:Event = response.data;\r\n        return data;\r\n    }\r\n\r\n    async getEventByID(id: string) {\r\n        const response = await axios.get(this.getURL()+\"/events/\"+id);\r\n        const data:Event = response.data;\r\n        return data;\r\n    }\r\n\r\n    async updateEvent(id:string, event:Event) {\r\n        const response = await axios.put(this.getURL()+\"/events\",\r\n        {\r\n            id:id,\r\n            ...event\r\n        });\r\n        const data:Event = response.data;\r\n        return data;\r\n    }\r\n        \r\n}\r\n","import React from \"react\";\r\nimport { TextInput, View } from \"react-native\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius, shadowRadius } from \"./styleconfig\";\r\n\r\n\r\nexport default function BasicInputText(props){\r\n    const {value, onChangeText, placeholder} = props;\r\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\r\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\r\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\r\n    const keyboardType = props?.keyboardType ?? 'default';\r\n    const editable = props?.editable ?? true;\r\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\r\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\r\n    const textAlign = props?.textAlign ?? 'center'\r\n\r\n    return(\r\n    <View style={{backgroundColor:GetColor(Color.InputText), borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), shadowRadius:shadowRadius()}}> \r\n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \r\n        keyboardType={keyboardType} editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}\r\n        style={{fontSize:20,textAlign:textAlign}} \r\n        />\r\n    </View>)\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\nimport { Event as Evvent } from \"../../classes-interface/api-entities\"\r\nimport UpdateAllEventsState from \"./update-allEvents-state\";\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\nimport { View, Text } from \"react-native\";\r\n\r\nexport default function CreateEventOption(props:{allEvents: Evvent[], setAllEvents: Function}){\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [desc, setDesc] = useState<string>(\"\")\r\n    const [date, setDate] = useState(new Date());\r\n    //const [time, settime] = useState(new Date())\r\n    const [showDateAndTime, setShowDateAndTime] = useState(false)\r\n    const [showDatePicker, setShowDatePicker]= useState(false)\r\n    const [showStartTimePicker, setShowStartTimePicker]= useState(false)\r\n    const [showEndTimePicker, setShowEndTimePicker] = useState(false)\r\n    const [startTime, setStart] = useState(()=>{let date = new Date(); if (date.getHours() > 12) {date.setHours(date.getHours()-12); return date} else{return date}})\r\n    const [endTime, setEnd] = useState(()=>{let date = new Date(); if (date.getHours() > 12) {date.setHours(date.getHours()-12); return date} else{return date}})\r\n    const [startAntePost, setStartAntePost] = useState(\"PM\")\r\n    const [endAntePost, setEndAntePost] = useState(\"PM\")\r\n    const [location, setLocation] = useState<string>(\"\")\r\n\r\n    //<BasicText text={(`${(new Date(context.reservationData.checkOut ?? 'N/A')).toDateString()} At: ${(new Date(context.reservationData.checkOut ?? \"N/A\")).toLocaleTimeString() }`)}/>\r\n    //useEffect(()=>{setTimeout(()=>setShowDateAndTime(false),300)  }, [endTime])\r\n\r\n    function formattedStartTime(time: Date){\r\n        const hours = time.getHours()\r\n\r\n        if (hours < 1 || hours > 12){\r\n            time.setHours(time.getHours() -12)\r\n            //setStart(time || startTime)\r\n        }\r\n        // else{\r\n        //     setStart(time || startTime)\r\n        // }\r\n\r\n        if (hours < 12) setStartAntePost('AM')\r\n        else setStartAntePost(\"PM\")\r\n        const formattedTime = time.toLocaleTimeString().slice(0,-3)\r\n        return(`${formattedTime} ${startAntePost}`)\r\n    }\r\n\r\n    function formattedEndTime(time: Date){\r\n        const hours = time.getHours()\r\n        if (hours < 1 || hours > 12){\r\n            time.setHours(time.getHours() -12)\r\n            setEnd(time || startTime)\r\n        }\r\n        else{\r\n            setEnd(time || startTime)\r\n        }\r\n\r\n        if (hours < 12) setEndAntePost('AM')\r\n        else setEndAntePost(\"PM\")\r\n\r\n    }\r\n\r\n    function RenderStartTime(){\r\n        return(\r\n            <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={startTime}\r\n            mode={'time'}\r\n            is24Hour={false}\r\n            display=\"clock\"\r\n            onChange={(event, selectedTime: Date)=>{console.log(\"start on change\", selectedTime.toLocaleTimeString()); setShowStartTimePicker(false); setStart(selectedTime || startTime)}}\r\n        />) \r\n    }\r\n\r\n    function RenderEndTime(){\r\n        return(\r\n            <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={endTime}\r\n            mode={'time'}\r\n            is24Hour={false}\r\n            display=\"clock\"\r\n            onChange={(event, selectedTime: Date)=>{console.log(\"end on change\",selectedTime.toLocaleTimeString()); setShowEndTimePicker(false); setEnd(selectedTime || endTime)}}\r\n        />) \r\n    }\r\n\r\n    function RenderDate(){\r\n        return(<DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={date}\r\n            mode={'date'}\r\n            is24Hour={false}\r\n            display=\"default\"\r\n            onChange={(event, selectedDate)=>{console.log(\"date on Change\"); setShowDatePicker(false); setDate(selectedDate || date)}}/> \r\n        )\r\n    }\r\n\r\n    function DateAndTime(){\r\n        if (showDateAndTime){\r\n            if(showDatePicker){\r\n                return (<RenderDate/>)\r\n            }\r\n            else if(showStartTimePicker){\r\n                return (\r\n                    <RenderStartTime/>\r\n                )\r\n            }\r\n            else if (showEndTimePicker )\r\n                {return (<RenderEndTime/>)}\r\n            else return (<></>)\r\n        }\r\n        else return (<></>) \r\n    }\r\n\r\n    const createEventStates = {title: title, desc: desc, startTime: startTime, endTime: endTime, location: location, allEvents: props.allEvents, setAllEvents: props.setAllEvents, startAntePost: startAntePost, endAntePost: endAntePost}\r\n\r\n    //console.log(showDatePicker)\r\n    function InputFields(inputFieldsProps){\r\n        return(\r\n            <>\r\n                <BasicInputText value={title} onChangeText={setTitle} placeholder={'title'}/>\r\n                <BasicInputText value={desc} onChangeText={setDesc} placeholder={'description'}/>\r\n                <BasicInputText value={location} onChangeText={setLocation} placeholder={'location'}/>\r\n                <BasicButton onPress={()=>{setShowDatePicker(true); setShowStartTimePicker(true); setShowEndTimePicker(true); setShowDateAndTime(true); }  } title={'set date and time'}/>\r\n                <DateAndTime/>\r\n                <BasicText text={`Start Date: ${date.toDateString()}`}/>\r\n                <BasicText text={`Start Time: ${startTime.toLocaleTimeString().slice(0,-3)}`}/>\r\n                <BasicText text={`End Time: ${endTime.toLocaleTimeString().slice(0,-3)}\\n\\n`}/>\r\n                {/* <BasicInputText value={startTime ?? ''} onChangeText={setStart} placeholder={'start time'} keyboardType={'numeric'}/> */}\r\n                {/* <BasicInputText value={endTime ?? ''} onChangeText={setEnd} placeholder={'end time'}/> */}\r\n                <BasicButton onPress={()=>UpdateAllEventsState(inputFieldsProps)} title={'Update Event List'}/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <BasicModal child={InputFields(createEventStates)} openTitle={\"Create Event\"}/>\r\n    )\r\n}\r\n","import { Event as Evvent } from \"../../classes-interface/api-entities\"\r\n\r\nexport default function UpdateAllEventsState(props){\r\n    const newEvent: Evvent = {\r\n        id:'random',\r\n        title:props.title,\r\n        desc:props.desc,\r\n        startTime:props.startTime,\r\n        endTime:props.endTime,\r\n        location:props.location,\r\n        status:\"On Schedule\"\r\n    }    \r\n    //const allEventsClone = props.allEvents\r\n    props.allEvents.push(newEvent)\r\n    console.log(\"🚀 ~ file: event-creation-option.tsx ~ line 26 ~ UpdateEventList ~ props.allEvents\", props.allEvents)\r\n\r\n    props.setAllEvents([...props.allEvents]) //update parent state. The [...] is needed to create a new array in memory!!\r\n\r\n}","export default function FormattedTime(time: Date){\r\n    time.toLocaleString()\r\n    const hours = time.getHours()\r\n    let AMorPM = \"\"\r\n    if (hours < 1 || hours > 12){\r\n        time.setHours(time.getHours() -12)\r\n    }\r\n    if (hours < 12) AMorPM = 'AM'\r\n    else AMorPM = 'PM'\r\n    const formattedTime = time.toLocaleTimeString().slice(0,-3)\r\n    return(`${formattedTime} ${AMorPM}`)\r\n}\r\n\r\nexport function GetDateFromNum(num: number){\r\n    const date = new Date(num * 1000).toUTCString()\r\n    console.log(date)\r\n    return date\r\n}","import React from \"react\"\r\nimport { View } from \"react-native\"\r\nimport { Event as Evvent } from \"../../classes-interface/api-entities\"\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\"\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\"\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\"\r\nimport FormattedTime from \"./event-date-formatting\"\r\n\r\n\r\nexport default function FormatSingleEvent(props:{event: Evvent, index:number, allEvents?: Evvent[], setAllEvents?: Function, filter?: string}){\r\n    const {id,title,desc,startTime,endTime,location,status} = props.event   \r\n    \r\n    const startTimeToDate = new Date(startTime)\r\n    const endTimeToDate = new Date(endTime)\r\n    const startTimeFormatted = FormattedTime(startTimeToDate)\r\n    const endTimeFormatted = FormattedTime(endTimeToDate)\r\n\r\n    function CancelEvent(id: string){\r\n        const newEventList = props.allEvents.map(event=> {\r\n            if(event.id === id) {event.status = \"Cancelled\"; return(event)} \r\n            else{return event} \r\n        })\r\n        props.setAllEvents([...newEventList])\r\n    }\r\n\r\n    return (\r\n        <View style={{borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), backgroundColor:GetColor(Color.SecondaryColor)}}>\r\n        {props.filter === id || !props.filter ?\r\n        <>\r\n            <BasicText text={`\\n\\n Event ${props.index + 1}`}/>\r\n            <BasicText text={`id: ${id}`}/>\r\n            <BasicText text={`title: ${title}`}/>\r\n            <BasicText text={`description: ${desc}`}/>\r\n            <BasicText text={`start time: ${startTimeFormatted}`}/>\r\n            <BasicText text={`end time: ${endTimeFormatted}`}/>\r\n            <BasicText text={`location: ${location}`}/>\r\n            <BasicText text={`status: ${status}`}/>\r\n            <BasicButton title={\"Cancel Event\"} onPress={()=>CancelEvent(props.event.id)}></BasicButton>\r\n        </> \r\n\r\n        :\r\n        \r\n        null}</View>)\r\n}","import { useEffect, useState } from \"react\";\r\nimport { ProgressViewIOSComponent } from \"react-native\";\r\nimport EventAPIHandler, {EventHandlerInterface} from \"../../classes-interface/eventhandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\r\n\r\n\r\nexport default function GetEventByID(props:{setFilteredEventID: Function}){\r\n    const [eventID, setEventID] = useState<string>(\"\")\r\n    useEffect(()=>{props.setFilteredEventID(eventID)}, [eventID])\r\n    return(\r\n        <>\r\n            {/* <BasicButton title={\"Search For An Event\"} onPress={()=>FilterEvents()}/> */}\r\n            <BasicInputText value={eventID} onChangeText={setEventID} placeholder={'Event ID'}/>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { FlatList, ScrollView, View, Text } from \"react-native\"\r\nimport { Event } from \"../../classes-interface/api-entities\"\r\nimport EventAPIHandler, { EventHandlerInterface } from \"../../classes-interface/eventhandler\"\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\"\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\"\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\"\r\nimport CreateEventOption from \"../children/create-event-option\"\r\nimport FormatSingleEvent from \"../children/format-single-event\"\r\nimport GetEventByID from \"../children/get-event-by-ID\"\r\n\r\nexport default function EventsPage(){\r\n    const eventhandle: EventHandlerInterface = new EventAPIHandler(true)\r\n    const dummyEvents: Event[] = [] /* = [{\r\n            id: 'dummyevent1',\r\n            title: 'title',\r\n            desc: 'desc',\r\n            startTime: 100,\r\n            endTime: 200,\r\n            location: 'location',\r\n            status: \"On Schedule\"\r\n        },\r\n        {\r\n            id: 'dummyevent2',\r\n            title: 'title2',\r\n            desc: 'desc2',\r\n            startTime: 300,\r\n            endTime: 400,\r\n            location: 'location2',\r\n            status: \"Cancelled\"\r\n        }\r\n    ] */\r\n    const [allEvents, setAllEvents] = useState(dummyEvents)\r\n    const [filteredEventID, setFilteredEventID] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        setAll()\r\n    }), []\r\n\r\n    async function setAll(){\r\n        const events = await eventhandle.getAllEvents()\r\n        setAllEvents(events)\r\n    }\r\n\r\n    //map all events into a scroll list\r\n    function FormattedEventsList(){\r\n        const formattedEvents = allEvents.map((event, index) => {return <FormatSingleEvent event={event} index={index} allEvents={allEvents} setAllEvents={setAllEvents} filter={filteredEventID}/>})        \r\n        return(\r\n            <View>\r\n                <ScrollView>\r\n                {formattedEvents}\r\n                </ScrollView>\r\n            </View>\r\n        )\r\n    }\r\n    return(\r\n        <View >\r\n                <BasicText text={\"Manage events\"} textType={TextType.Title}/>\r\n                <GetEventByID setFilteredEventID={setFilteredEventID}/>\r\n                <CreateEventOption allEvents={allEvents} setAllEvents={setAllEvents}/>\r\n                <FormattedEventsList/>\r\n        </View>)\r\n}\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\n\r\n/**this is a component for spacing elements with flex box. @attribute space will give a flex number for spacing*/\r\nexport default function FlexSpacer(props){\r\n    const space:number = props?.space ?? 1;\r\n    return(<View style={{flex:space}} />)\r\n}","import React from \"react\"\r\nimport { View } from \"react-native\"\r\n\r\n\r\n/**this is a component for spacing elements with absolute pixels. @attribute height, width will default to 0. others include minWidth, maxWidth, minHight, maxHight*/\r\nexport default function PixelSpacer(props){\r\n    const height = props?.height ?? 0\r\n    const width = props?.width ?? 0\r\n    const {minHeight,minWidth,maxHeight,maxWidth} = props\r\n\r\n\r\n    return(<View style={{height:height, width:width, minHeight, minWidth, maxHeight, maxWidth}}/>)\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { Dimensions, Platform, View } from \"react-native\";\r\nimport { appContext, AppContextInterface } from \"../../classes-interface/app-conext\";\r\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\nimport FlexSpacer from \"../../SafariSolaceStyleTools/flex-spacer\";\r\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\r\n\r\n\r\n\r\nexport default function LoginPage(props) {\r\n  const context: AppContextInterface = useContext(appContext)\r\n\r\n  async function tryLogin(userName:string, password:string) {\r\n    const employee = new employeeAPIHandler(true);\r\n    \r\n    const response = await employee.login(userName, password);\r\n    const emp = response;\r\n    console.log(emp);\r\n    if(emp.password === password && emp.username === userName){\r\n      context.setUser(emp);\r\n      setPage();\r\n    }\r\n  }\r\n\r\n  function setPage(){\r\n    props.setPage(1);\r\n    alert(\"Be sure to clock in! \");\r\n  }\r\n\r\n  function PageDisplay(){\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    if(Platform.OS == \"web\"){\r\n      return(\r\n        <View >\r\n      <View style={{justifyContent:\"center\", alignItems:\"center\"}}><BasicText text={\"Welcome to\\nSafari Solace Helper\"} textType={TextType.Title} textAlign={\"center\"} /></View>\r\n      <PixelSpacer height={5} />\r\n      <View style={{ flexDirection:\"row\"}}>\r\n        <FlexSpacer space={1} />\r\n        <View style={{flex:3, flexDirection:\"column\"}}>\r\n          <BasicInputText value={userName} onChangeText={t => setUserName(t)} placeholder={\"Username\"}/>\r\n          <BasicInputText value={password} onChangeText={t => setPassword(t)} placeholder={\"Password\"}/>\r\n          <View style={{flexDirection:\"row\"}}>\r\n            <FlexSpacer space={1} />\r\n            <View style={{flex:3}}><BasicButton title={\"Login\"} onPress={()=>tryLogin(userName, password)} /></View>\r\n            <FlexSpacer space={1} />\r\n          </View>\r\n        </View>\r\n        <FlexSpacer space={1} />\r\n      </View>\r\n    </View>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <View >\r\n      <View style={{justifyContent:\"center\", alignItems:\"center\"}}><BasicText text={\"Welcome to\\nSafari Solace Helper\"} textType={TextType.Title} textAlign={\"center\"} /></View>\r\n      <PixelSpacer height={5} />\r\n      <View style={{ flexDirection:\"row\"}}>\r\n        <FlexSpacer space={1} />\r\n        <View style={{flex:5, flexDirection:\"column\"}}>\r\n          <BasicInputText value={userName} onChangeText={t => setUserName(t)} placeholder={\"Username\"}/>\r\n          <BasicInputText value={password} onChangeText={t => setPassword(t)} placeholder={\"Password\"}/>\r\n          <View style={{flexDirection:\"row\"}}>\r\n            <FlexSpacer space={1} />\r\n            <View style={{flex:10}}><BasicButton title={\"Login\"} onPress={()=>tryLogin(userName, password)} /></View>\r\n            <FlexSpacer space={1} />\r\n          </View>\r\n          <PixelSpacer height={Dimensions.get(\"window\").width*.50}/>\r\n        </View>\r\n        <FlexSpacer space={1} />\r\n      </View>\r\n    </View>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  return (<PageDisplay/>  )\r\n}\r\n","import axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { Problem } from \"./api-entities\";\r\nimport { appContext } from \"./app-conext\";\r\n\r\nexport interface ProblemHandlerInterface{\r\n    getAllProblems():Promise <Problem[]>\r\n\r\n    getByProblemID(id:string) : Promise<Problem>\r\n\r\n    markReviewed(id:string, status:string) : Promise<Problem>\r\n}\r\n\r\nexport default class ProblemAPIHandler implements ProblemHandlerInterface{\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    private IndexURL =0;\r\n    //constructor\r\n    constructor(dev:boolean = false, IndexURL=1){\r\n        this.devMode=dev;\r\n        this.IndexURL=IndexURL\r\n    }\r\n    //////////////////////////////////////////////\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(!this.devMode){ return this.useURL} //postman mock\r\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\r\n\r\n    }\r\n    async getAllProblems():Promise <Problem[]> {\r\n        const response = await axios.get(this.getURL()+\"/problems\");\r\n        const data:Problem[] = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async getByProblemID(id:string) {\r\n        const response = await axios.get(this.getURL()+\"/problems/\"+id);\r\n        const data:Problem = response.data;\r\n        return data;    \r\n    }\r\n\r\n    async markReviewed(id:string, status:string) {\r\n        const response = await axios.put(this.getURL()+\"/problems/\"+id,\r\n        {\r\n            id:id,\r\n            status:status\r\n        });\r\n        const data:Problem = response.data;\r\n        return data;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n//export const httpHandler1 = new ProblemAPIHandler(false, 1);","import { Problem } from \"../../classes-interface/api-entities\";\r\nimport ProblemAPIHandler, { ProblemHandlerInterface } from \"../../classes-interface/problemhandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\nexport default function ProblemItem(props: Problem){\r\n\r\n    const {id, desc, submittedTime, status, photoLink} = props;\r\n\r\n    const handler: ProblemHandlerInterface = new ProblemAPIHandler();\r\n\r\n    function setReviewed(){\r\n        handler.markReviewed(id, \"Reviewed\");\r\n    }\r\n\r\n    function renderPage(){\r\n        return(<>\r\n        <BasicText text={`ID: ${id}`} textType={TextType.Title}/>\r\n            <BasicText text={`Description: ${desc}`} textType={TextType.Header}/>\r\n            <BasicText text={`Time Submitted: ${submittedTime}`} textType={TextType.Header}/>\r\n            <BasicText text={`Status: ${status}`} textType={TextType.Header}/>\r\n            {photoLink ? <BasicButton onPress={()=>{window.location.href=photoLink}} title={\"Download Photo\"}/> : <BasicText text={\"No uploaded image...\"}/>}\r\n            <BasicButton onPress={setReviewed} title={\"Mark as reviewed\"}/>\r\n        </>)\r\n    }\r\n    return(<>\r\n        <BasicModal child={renderPage()} openTitle={desc}/>\r\n    </>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { ScrollView, View } from \"react-native\";\r\nimport { Problem } from \"../../classes-interface/api-entities\";\r\nimport ProblemAPIHandler, { ProblemHandlerInterface } from \"../../classes-interface/problemhandler\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\nimport ProblemItem from \"../children/problem-item\";\r\n\r\nexport default function ProblemView(){\r\n\r\n    const testproblemList: Problem[] = [\r\n        {id: \"aa9cc399-a64b-4a10-b6ed-4f4aca673e9f\",\r\n        desc: \"Test Problem!\",\r\n        submittedTime: 1644428469371,\r\n        status: \"Unreviewed\",\r\n        photoLink: \"https://projstorage0.blob.core.windows.net/images/24026990290640815-Receipt.jpg\"},\r\n        {id: \"aa9cc399-a64b-4a10-b6ed-4f4aca673e88\",\r\n        desc: \"Test Problem1!\",\r\n        submittedTime: 1644428469372,\r\n        status: \"Unreviewed\"}\r\n    ]\r\n\r\n    const [problemList, setProblemList] = useState([... testproblemList]);\r\n\r\n    const handler: ProblemHandlerInterface = new ProblemAPIHandler(true);\r\n\r\n    //useEffect(()=>{setter()},[]);\r\n\r\n    async function setter(){\r\n        const response: Problem[] = await handler.getAllProblems();\r\n        const pendingProblems: Problem[] = response.filter(p => p.status === \"Unreviewed\"); \r\n        setProblemList(pendingProblems);\r\n    }\r\n\r\n    const problemItems = problemList.map(p => <ProblemItem key={p.id} {...p}/>)\r\n\r\n    return(<View>\r\n        <BasicText text={'Current Problems'} textType={TextType.Title}/>\r\n        <ScrollView>\r\n            {problemItems}\r\n        </ScrollView>\r\n\r\n    </View>)\r\n}","import axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { ServiceRequest } from \"./api-entities\";\r\nimport { appContext } from \"./app-conext\";\r\n\r\n\r\nexport enum sortType {\r\n   Ordered ,\r\n   Processing,\r\n   Completed ,\r\n   Cancelled,\r\n   All\r\n}\r\n\r\nexport interface RoomServiceHandlerInterface{\r\n    /**sorting by type! All, completed, processing, ordered, canceled*/\r\n    getAllRequest(type:sortType): Promise<ServiceRequest[]>\r\n    markAsProcessed(id:string): Promise<ServiceRequest>\r\n    markAsCompleted(id:string) : Promise<ServiceRequest>\r\n}\r\n\r\nexport default class RoomServiceHandlerAPIHandler implements RoomServiceHandlerInterface{\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    private IndexURL =0;\r\n    //constructor\r\n    constructor(dev:boolean = false, IndexURL=1){\r\n        this.devMode=dev;\r\n        this.IndexURL=IndexURL\r\n    }\r\n    //////////////////////////////////////////////\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(!this.devMode){ return this.useURL} //postman mock\r\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\r\n\r\n    }\r\n    \r\n    async getAllRequest(type: sortType) {\r\n        const response = await axios.get(this.getURL()+\"/servicerequests\");\r\n        const data:ServiceRequest[] = response.data;\r\n        if(type == sortType.All){\r\n            return data;\r\n        }else{\r\n            let newData:ServiceRequest[] = [];\r\n            for(let i=0; i<data.length; i++){\r\n                if(data[i].status == sortType[type]){\r\n                    newData.push(data[i]);\r\n                }\r\n            }\r\n            return newData;\r\n        }\r\n    }\r\n\r\n    async markAsProcessed(id:string) {\r\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\r\n            status: \"Processing\"\r\n        });\r\n        const data:ServiceRequest = response.data;\r\n        return data;\r\n    }\r\n    async markAsCompleted(id:string) {\r\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\r\n            status: \"Completed\"\r\n        });\r\n        const data:ServiceRequest = response.data;\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const httpHandler1 = new  RoomServiceHandlerAPIHandler(false, 1);","import React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Offering, ServiceRequest } from \"../../classes-interface/api-entities\";\r\nimport RoomServiceHandlerAPIHandler from \"../../classes-interface/room-service-handler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\n\r\n\r\n\r\nexport default function RoomServiceRequest(props){\r\n    const initServiceRequest:ServiceRequest = props.serviceRequest\r\n    const [serviceRequest, setServiceRequest] = useState(initServiceRequest)\r\n\r\n\r\n    const handler = new RoomServiceHandlerAPIHandler()\r\n    \r\n\r\n    function SwitchButtonDisplay(){\r\n        if(serviceRequest.status == \"Ordered\" )          return <BasicButton title={' Start Order'} onPress={()=>{ /*handler.markAsProcessed(serviceRequest.id);*/ }} />\r\n        else if(serviceRequest.status ==  \"Processing\" ) return <BasicButton title={' Mark order as complete'} onPress={()=>{ /*handler.markAsCompleted(serviceRequest.id);*/ }} />\r\n        else                                             return <></>\r\n    }\r\n\r\n    function SwitchStatusDisplay(){\r\n        return(<View style={{flexDirection:\"row\"}}>\r\n            <BasicText text={\"Status\"}/><BasicText text={serviceRequest?.status ?? \"Ordered\"}/><SwitchButtonDisplay/>\r\n        </View>)\r\n    }\r\n\r\n    function GetOfferingString(){\r\n        let tempString:string= '';\r\n        try {\r\n            if(serviceRequest.requestedOffering?.length <1){return 'In valid request in the system'}\r\n            for(let i =0; i < serviceRequest.requestedOffering.length; i ++){\r\n                if(i==0){tempString+= `\\t-${serviceRequest.requestedOffering[i].desc}`;}\r\n                else{tempString+= `\\n\\t-${serviceRequest.requestedOffering[i].desc}`;}\r\n            }\r\n            if(!tempString) return 'In valid request in the system'\r\n            return 'Hello'\r\n        } catch (error) {\r\n            return 'In valid request in the system'\r\n        }\r\n    }\r\n\r\n\r\n    function RequestDisplay(){\r\n        const dateDisplay = (new Date(serviceRequest.created))\r\n        return(\r\n        <>\r\n            <BasicText text={`Room: ${serviceRequest.room}`}/>\r\n            <BasicText text={`Created: ${dateDisplay.toDateString()}, at ${dateDisplay.toLocaleTimeString()}`}/>\r\n            <View><BasicText text={'Requested Offerings:'}/><BasicText text={GetOfferingString()}/></View>\r\n            <SwitchStatusDisplay/>\r\n        </>)\r\n    }\r\n\r\n    return(\r\n    <>\r\n        <BasicModal openTitle ={(props?.openTitle ?? \"null open title\")} child={<RequestDisplay/>}/>\r\n    </>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Dimensions, FlatList, Platform, ScrollView, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\nimport RoomServiceRequest from \"../children/room-service-request\";\r\nimport {Offering, ServiceRequest} from '../../classes-interface/api-entities';\r\nimport RoomServiceHandlerAPIHandler, { sortType } from \"../../classes-interface/room-service-handler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\n\r\n\r\n\r\n\r\nexport default function RoomService(){\r\n\r\n    const dummyArray:ServiceRequest[] = []\r\n    const [data, setData] = useState(dummyArray);\r\n    const [sort, setSort] = useState(sortType.All)\r\n    const handler = new RoomServiceHandlerAPIHandler(true)\r\n    const [displayList, setDisplayList] = useState([<></>])\r\n    \r\n\r\n    useEffect(() => {\r\n        grabServiceRequest(sortType.All)\r\n    \r\n      return () => {\r\n        \r\n      }\r\n    }, [])\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    async function grabServiceRequest(type:sortType){\r\n    try {\r\n            const foundRequest = await handler.getAllRequest(type);\r\n            console.log(foundRequest)\r\n            if(foundRequest) {setData(foundRequest);setSort(type);displaySwitch()}\r\n        } catch (error) {\r\n            console.log('Failed to sort request')\r\n        }\r\n    }\r\n\r\n   function FilterButtons(){\r\n       if(Platform.OS == \"web\"){\r\n        return( \r\n        <View>\r\n            <BasicText text={`Filtering Type: ${sortType[sort]}`} textType={TextType.Header}/>\r\n                <View style={{flexDirection:\"row\", alignSelf:\"stretch\"}}>\r\n                <View style={{flex:1}}><BasicButton title={'All'} onPress={()=> grabServiceRequest(sortType.All)} /></View>\r\n                <View style={{flex:1}}><BasicButton title={'Ordered'} onPress={()=> grabServiceRequest(sortType.Ordered)} /></View>\r\n                <View style={{flex:1}}><BasicButton title={'Processing'} onPress={()=> grabServiceRequest(sortType.Processing)} /></View>\r\n                <View style={{flex:1}}><BasicButton title={'Complete'} onPress={()=> grabServiceRequest(sortType.Completed)} /></View>\r\n            <View style={{flex:1}}><BasicButton title={'Cancelled'} onPress={()=> grabServiceRequest(sortType.Cancelled)} /></View>\r\n        </View>\r\n        \r\n        </View>)\r\n       }\r\n       else{\r\n        return( \r\n                <BasicModal openTitle={`Filtering Type: ${sortType[sort]}`} child={\r\n                    <View style={{flexDirection:\"column\", alignSelf:\"stretch\",justifyContent:\"center\"}}>\r\n                        <PixelSpacer width={Dimensions.get(\"screen\").width*0.60} height={1}/> \r\n                        <BasicButton title={'All'} onPress={()=> grabServiceRequest(sortType.All)} />\r\n                        <BasicButton title={'Ordered'} onPress={()=> grabServiceRequest(sortType.Ordered)} />\r\n                        <View ><BasicButton title={'Processing'} onPress={()=> grabServiceRequest(sortType.Processing)} /></View>\r\n                        <View><BasicButton title={'Complete'} onPress={()=> grabServiceRequest(sortType.Completed)} /></View>\r\n                        <View ><BasicButton title={'Cancelled'} onPress={()=> grabServiceRequest(sortType.Cancelled)} /></View>\r\n                    </View>\r\n                }/>)\r\n       }\r\n   }\r\n\r\n   \r\n/*       function Testing(){\r\n        let testStack:ServiceRequest[] =[]\r\n        for(let i =0; i <10; i++ ){\r\n            let dummyOffering:Offering={\r\n                desc: \"Testing\",\r\n                cost: 0\r\n            }\r\n            const T = \"Completed\"\r\n            let dummy:ServiceRequest = {\r\n                id: `EXRoom${i}`,\r\n                room: `EXRoom${i}`,\r\n                created: (Math.random()*100000000),\r\n                status: T ,\r\n                requestedOffering: [dummyOffering,dummyOffering,dummyOffering]\r\n            }\r\n\r\n            testStack.push( dummy )\r\n        }\r\n        setData(testStack);\r\n    } */\r\n\r\n    function displaySwitch(){\r\n        if(data?.length >0){\r\n            setDisplayList(data.map((item)=>{ return <RoomServiceRequest  key={v4()} openTitle = {`Room: ${item?.room ?? 'Invalid'}, ${item?.status ?? 'Invalid'}`} serviceRequest={item}/>})  )\r\n        }\r\n        else setDisplayList([<BasicText key={v4()} text={`No request found for ${sortType[sort]}`}/>])\r\n    }\r\n    //grabServiceRequest(sort)\r\n\r\n    return(\r\n    <View style={{alignContent:\"center\", justifyContent:\"center\"}}>\r\n        <ScrollView>\r\n            <BasicText text={\"Room Service Request\"} textType={TextType.Title}/>\r\n            <PixelSpacer width={Dimensions.get(\"screen\").width*0.35} height={1}/>\r\n            <FilterButtons />\r\n            <BasicButton title={'Refresh'} onPress={()=>{grabServiceRequest(sort)}} />\r\n            <View style={{backgroundColor:GetColor(Color.SecondaryColor), padding:paddingRadius(), margin:margin(), borderRadius:borderRadius()}}>\r\n                {displayList}\r\n            </View>\r\n        </ScrollView>\r\n    </View>)\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { Dimensions, View } from \"react-native\"\r\nimport { Employee, WorkLog } from \"../../classes-interface/api-entities\"\r\nimport employeeAPIHandler, { EmployeeHandlerInterface } from \"../../classes-interface/employeehandler\"\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\"\r\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\"\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\"\r\nimport { GetDateFromNum } from \"../children/event-date-formatting\"\r\n\r\nexport default function ViewEmployeeStatus(){\r\n    //get employee statuses\r\n    //prepare render list worklogs\r\n    const handler: EmployeeHandlerInterface = new employeeAPIHandler(true)\r\n    const [worklogsState, setWorkLogs] = useState<WorkLog[]>([])\r\n    useEffect(()=>{GetWorkLogs()}, [])\r\n\r\n    async function GetWorkLogs(){\r\n        //const worklogs = await handler.getWorklogs()\r\n        //console.log(worklogs)\r\n        //setWorkLogs(worklogs)\r\n        const dummyWorklogs: WorkLog[] = [{wId: 123, type: 'CHECKOUT', timestamp: 1230}, {wId: 456, type: 'CHEKIN', timestamp: 9994063236}]\r\n        setWorkLogs(dummyWorklogs)\r\n    }\r\n\r\n    function LinkEmployee(worklogID: number){\r\n        const dummyEmployee: Employee[] = [{id: 123,isManager: false,fname: 'dude',lname: 'bro',username: 'yoyoyo',password: 'hmm'}]\r\n        const employee: Employee = dummyEmployee.find((employee)=>{return(employee.id === worklogID)}) //must have return in order to work\r\n        console.log(\"employee\", employee)\r\n        if(!employee) return \"no name found\" //in case no match is made\r\n        else return(employee.fname)\r\n    }\r\n\r\n    function PreparedWorkLogs(){\r\n        console.log('worklog state',worklogsState)\r\n        const loglist = worklogsState.map((worklog, key)=>{\r\n            return(\r\n                <View style={{backgroundColor:GetColor(Color.TertiaryColor), borderRadius:borderRadius(), margin:margin(), padding:paddingRadius()}}>\r\n                    <BasicText key={key} text={`NAME: ${LinkEmployee(worklog.wId)}\\nSTATUS: ${worklog.type}\\nTIMESTAMP: ${GetDateFromNum(worklog.timestamp)}`}/>\r\n                </View>)})\r\n        //console.log(loglist)\r\n        return (<View>{loglist}</View>)\r\n    }\r\n\r\n    return(<>  \r\n        <BasicText text={'Employee Clock Status'} textType={TextType.Title}/>\r\n        <View style={{backgroundColor:GetColor(Color.SecondaryColor), borderRadius:borderRadius()}}>\r\n            <PreparedWorkLogs/>\r\n        </View>\r\n    </>)\r\n}","import React, { useState } from 'react';\r\nimport { Dimensions, Platform, SafeAreaView } from 'react-native';\r\nimport { StyleSheet, View, Image } from 'react-native';\r\nimport { Employee } from './classes-interface/api-entities';\r\nimport { appContext, AppContextInterface } from './classes-interface/app-conext';\r\nimport NavBar from './Components/children/nav-bar';\r\nimport ClockingScreen from './Components/pages/clocking';\r\nimport EventsPage from './Components/pages/events-page';\r\nimport LoginPage from './Components/pages/login';\r\nimport ProblemView from './Components/pages/problem-view';\r\nimport RoomService from './Components/pages/room-service';\r\nimport ViewEmployeeStatus from './Components/pages/view-employee-status';\r\nimport BasicText from './SafariSolaceStyleTools/basictext';\r\nimport PixelSpacer from './SafariSolaceStyleTools/pixel-spacer';\r\nimport { Theme } from './SafariSolaceStyleTools/styleconfig';\r\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\r\n\r\nexport default function App() {\r\n\r\n  const [theme, setTheme] = useState(Theme.default);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [clockStatus, setClockStatus] = useState(false)\r\n  const dummyEmployee:Employee = {id: 0,isManager: false,fname: '',lname: '',username: '',password: ''}\r\n  const [user, setUser] = useState(dummyEmployee)\r\n\r\n  const initContext:AppContextInterface = {\r\n    clockStatus: clockStatus,\r\n    setClockStatus: setClockStatus,\r\n    user: user,\r\n    setUser: setUser\r\n  }\r\n  const themeContextObject:ThemeContextInterface = {theme:theme,setTheme:setTheme}\r\n\r\n  function SwitchPage(){\r\n    switch(pageIndex){\r\n\r\n      //================================================================================================\r\n      case    /*login*/           0:{return (<><LoginPage setPage={setPageIndex}/></>)}\r\n      case    /*room service*/    1:{return (<><NavBar setPageIndex={setPageIndex}/><RoomService/></>)}\r\n      case    /*event*/           2:{return (<><NavBar setPageIndex={setPageIndex}/><EventsPage/></>)}\r\n      case    /*check in*/        3:{return (<><NavBar setPageIndex={setPageIndex}/><ClockingScreen/></>)}\r\n      case    /*status check*/    4:{return (<><NavBar setPageIndex={setPageIndex}/><ViewEmployeeStatus/></>)}\r\n      case    /*problem*/         5:{return (<><NavBar setPageIndex={setPageIndex}/><ProblemView/></>)}\r\n      //================================================================================================\r\n      case    /*kris*/            6:{return (<><EventsPage/></>)}\r\n      case    /*john*/            7:{return (<><RoomService/></>)}\r\n      case    /*brandon*/         8:{return (<><BasicText text={'brandon'}/></>)}\r\n      case    /*josh*/            9:{return (<><BasicText text={'josh'}/></>)} \r\n      default                      :{return (<><BasicText text={'Testing'}/></>)}\r\n    }\r\n  }\r\n\r\n  const isWeb = Platform.OS == \"web\"\r\n  /** Logo scaling factor for platform */\r\n  function getLS(){\r\n    if(isWeb)return 3\r\n    else return 2\r\n  }\r\n\r\n  function WebMainSpacer(){\r\n    if(Platform.OS == \"web\") {return<PixelSpacer width={Dimensions.get(\"screen\").width*0.60} height={1}/> }\r\n    else{return <></>}\r\n  }\r\n  function MobileHeaderSpacer(){\r\n    if(Platform.OS == \"web\") return <></>\r\n    else{\r\n      switch(pageIndex){\r\n        case 0:{ return <></>}\r\n        case 1:{ return <PixelSpacer height={Dimensions.get(\"screen\").height*0.9} width={1}/> }\r\n        case 2:{ return <PixelSpacer height={Dimensions.get(\"screen\").height*1.5} width={1}/>}\r\n        case 3:{ return <></>}\r\n        case 4:{ return <></>}\r\n        case 5:{ return <PixelSpacer height={Dimensions.get(\"screen\").height*1} width={1}/>}\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <SafeAreaView >\r\n      <appContext.Provider value = {initContext}>\r\n        <themeContext.Provider value = { themeContextObject }>\r\n          <View style={{flexDirection:\"row\"}}>\r\n            <View style={{flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\r\n                <WebMainSpacer/>\r\n                <MobileHeaderSpacer/>\r\n                <Image style={{height:64*getLS(),width:64*getLS(),margin:10}} source={ require('./assets/Sale.png') }/>\r\n                <SwitchPage/>\r\n            </View>\r\n          </View>\r\n        </themeContext.Provider>\r\n      </appContext.Provider>\r\n      </SafeAreaView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#444',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"sourceRoot":""}