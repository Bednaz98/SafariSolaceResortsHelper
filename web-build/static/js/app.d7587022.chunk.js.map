{"version":3,"sources":["assets/Sale.png","SafariSolaceStyleTools/styleconfig.ts","classes-interface/app-conext.tsx","SafariSolaceStyleTools/themecontext.tsx","SafariSolaceStyleTools/basicbutton.tsx","SafariSolaceStyleTools/basicmodal.tsx","Components/pages/logoutButton.tsx","Components/children/nav-bar.tsx","SafariSolaceStyleTools/basictext.tsx","classes-interface/employeehandler.ts","Components/pages/clocking.tsx","classes-interface/eventhandler.ts","SafariSolaceStyleTools/basicinputtext.tsx","Components/children/create-event-option.tsx","Components/children/update-allEvents-state.tsx","Components/children/event-date-formatting.tsx","Components/children/format-single-event.tsx","Components/children/get-event-by-ID.tsx","Components/pages/events-page.tsx","SafariSolaceStyleTools/flex-spacer.tsx","SafariSolaceStyleTools/pixel-spacer.tsx","Components/pages/login.tsx","classes-interface/problemhandler.ts","Components/children/problem-item.tsx","Components/pages/problem-view.tsx","classes-interface/room-service-handler.ts","Components/children/room-service-request.tsx","Components/pages/room-service.tsx","Components/pages/view-employee-status.tsx","App.tsx"],"names":["module","exports","Theme","Color","initContext","clockStatus","setClockStatus","user","undefined","setUser","appContext","createContext","themeContext","theme","setTheme","GetColor","colorType","returnColor","useContext","light","Text","textHeader","textTitle","Button","InputText","ModalBackground","ModalInner","primaryColor","SecondaryColor","TertiaryColor","dark","hacker","Platform","OS","shadowRadius","borderRadius","paddingRadius","margin","BasicButton","props","onPress","title","View","style","backgroundColor","padding","color","disabled","testID","key","BasicModal","child","openTitle","useState","show","setShow","styles","StyleSheet","create","modalView","flexDirection","flex","alignContent","justifyContent","alignItems","shadowColor","shadowOffset","width","height","Modal","animationType","transparent","visible","onRequestClose","borderWidth","LogoutButton","AsyncStorage","removeItem","setPage","NavBar","context","ManagerOptions","console","log","isManager","setPageIndex","alignSelf","TextType","employeeAPIHandler","dev","IndexURL","useURL","devMode","loginUrl","this","a","async","axios","get","getURL","response","data","id","filter","w","wId","type","post","username","password","patch","BasicText","text","Error","textType","textColor","textAlign","fontSize","getTextFontSize","getAlignment","tempAlign","Title","Header","General","ClockingScreen","clockCheck","setClockCheck","handler","useEffect","getWorklogByID","clockin","clockout","EventAPIHandler","put","status","event","BasicInputText","value","onChangeText","placeholder","keyboardType","editable","onChange","nativeEvent","eventCount","target","onContentSizeChange","contentSize","TextInput","CreateEventOption","setTitle","desc","setDesc","Date","date","setDate","showDateAndTime","setShowDateAndTime","showDatePicker","setShowDatePicker","showStartTimePicker","setShowStartTimePicker","showEndTimePicker","setShowEndTimePicker","getHours","setHours","startTime","setStart","endTime","setEnd","startAntePost","endAntePost","location","setLocation","RenderStartTime","mode","is24Hour","display","selectedTime","toLocaleTimeString","RenderEndTime","RenderDate","selectedDate","DateAndTime","inputFieldsProps","createEventStates","allEvents","setAllEvents","toDateString","slice","newEvent","push","UpdateAllEventsState","FormattedTime","time","toLocaleString","hours","AMorPM","GetDateFromNum","num","toUTCString","FormatSingleEvent","startTimeToDate","endTimeToDate","startTimeFormatted","endTimeFormatted","index","newEventList","map","CancelEvent","GetEventByID","eventID","setEventID","setFilteredEventID","EventsPage","eventhandle","filteredEventID","getAllEvents","events","setAll","formattedEvents","ScrollView","FlexSpacer","space","PixelSpacer","minHeight","minWidth","maxHeight","maxWidth","LoginPage","tryLogin","userName","employee","login","emp","alert","setUserName","setPassword","t","Dimensions","ProblemAPIHandler","ProblemItem","submittedTime","photoLink","setReviewed","markReviewed","window","href","ProblemView","problemList","problemItems","p","sortType","RoomServiceHandlerAPIHandler","All","newData","i","length","RoomServiceRequest","initServiceRequest","serviceRequest","SwitchButtonDisplay","SwitchStatusDisplay","GetOfferingString","tempString","requestedOffering","error","dateDisplay","created","room","RoomService","setData","sort","setSort","displayList","setDisplayList","grabServiceRequest","getAllRequest","foundRequest","displaySwitch","item","v4","Ordered","Processing","Completed","Cancelled","ViewEmployeeStatus","worklogsState","setWorkLogs","LinkEmployee","worklogID","fname","lname","find","timestamp","loglist","worklog","App","default","pageIndex","themeContextObject","isWeb","getLS","container","SafeAreaView","Provider","Image","source","require"],"mappings":"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","file":"static/js/app.d7587022.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sale.c1fdc2f5.png\";","import { useContext } from \"react\";\nimport { Platform } from \"react-native\";\nimport { themeContext } from \"./themecontext\";\n\nexport enum Theme{\n    default,\n    light,\n    dark,\n    hacker\n}\n\nexport enum Color{\n    Text,\n    textHeader,\n    textTitle,\n    Button,\n    ModalBackground,\n    ModalInner,\n    InputText,\n    primaryColor,\n    SecondaryColor,\n    TertiaryColor,\n}\n\nexport default function GetColor(colorType:Color){\n    const context = useContext(themeContext);\n    let returnColor = '#ffffff'\n\n    switch(context.theme){\n        case Theme.light:{\n            switch(colorType){\n                case Color.Text: { returnColor = '#E6B566' ; break}\n                case Color.textHeader: { returnColor = '#E6B566' ; break}\n                case Color.textTitle: { returnColor = '#E6B566' ; break}\n                case Color.Button: { returnColor = '#E5707E' ; break}\n                case Color.InputText: { returnColor ='#E5707E'; break}\n                case Color.ModalBackground: { returnColor = '#A3DDCB'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#A3DDCB' ; break}\n                case Color.SecondaryColor: { returnColor = '#E8E9A1'; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            };break\n        }\n        case Theme.dark:{\n            switch(colorType){\n                case Color.Text: { returnColor = '#2D4263' ; break}\n                case Color.textHeader: { returnColor = '#2D4263' ; break}\n                case Color.textTitle: { returnColor = '#2D4263' ; break}\n                case Color.Button: { returnColor = '#C84B31' ; break}\n                case Color.InputText: { returnColor ='#C84B31'; break}\n                case Color.ModalBackground: { returnColor = '#191919'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#191919' ; break}\n                case Color.SecondaryColor: { returnColor = '#191919' ; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            };break\n        }\n        case Theme.hacker:{\n            switch(colorType){\n                case Color.Text: { returnColor = '#14f074' ; break}\n                case Color.textHeader: { returnColor = '#14f074'  ; break}\n                case Color.textTitle: { returnColor = '#14f074'  ; break}\n                case Color.Button: { returnColor = '#0c833d' ; break}\n                case Color.InputText: { returnColor ='#0c833d'; break}\n                case Color.ModalBackground: { returnColor = '#0c833d'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor ='#063335' ; break}\n                case Color.SecondaryColor: { returnColor = '#063335' ; break}\n                case Color.TertiaryColor: { returnColor = '#13993b' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            };break\n        }\n        default:{\n            switch(colorType){\n                case Color.Text: { returnColor = 'ivory' ; break}\n                case Color.textHeader: { returnColor = 'ivory' ; break}\n                case Color.textTitle: { returnColor = 'ivory' ; break}\n                case Color.Button: { returnColor = 'chocolate' ; break}\n                case Color.InputText: { returnColor ='linen'; break}\n                case Color.ModalBackground: { returnColor = '#96D65E'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#333' ; break}\n                case Color.SecondaryColor: { returnColor = '#5B995A' ; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            };break\n        }\n    }\n    if(Platform.OS == \"android\"){ return `${returnColor }`}\n    else return returnColor \n\n}\n\n\nexport function shadowRadius(){\n    const context = useContext(themeContext);\n    switch(context.theme){\n        case Theme.light:   {return 5}\n        case Theme.dark:    {return 5}\n        case Theme.hacker:  {return 1}\n        default:            {return 5}\n    }\n\n}\n\nexport function borderRadius(){\n    const context = useContext(themeContext);\n    switch(context.theme){\n        case Theme.light:   {return 10}\n        case Theme.dark:    {return 10}\n        case Theme.hacker:  {return 0}\n        default:            {return 10}\n    }\n\n}\n\nexport function paddingRadius(){\n    const context = useContext(themeContext);\n    switch(context.theme){\n        case Theme.light:   {return 5}\n        case Theme.dark:    {return 5}\n        case Theme.hacker:  {return 0}\n        default:            {return 5}\n    }\n}\n\nexport function margin(){\n    const context = useContext(themeContext);\n    switch(context.theme){\n        case Theme.light:   {return 5}\n        case Theme.dark:    {return 5}\n        case Theme.hacker:  {return 2}\n        default:            {return 5}\n    }\n}\n","import { createContext } from \"react\";\nimport { Employee } from \"./api-entities\";\n\n\n\nexport interface AppContextInterface{\n    clockStatus:boolean\n    setClockStatus:React.Dispatch<React.SetStateAction<boolean>>\n    user:Employee\n    setUser:React.Dispatch<React.SetStateAction<Employee>>\n\n}\n\n\nexport const initContext: AppContextInterface = {\n    clockStatus: false,\n    setClockStatus: ()=>{},\n    user: undefined,\n    setUser: ()=>{}\n}\n\nexport const appContext = createContext(initContext);","import { createContext, useContext } from \"react\";\nimport { Theme } from \"./styleconfig\";\n\n\n\n/**this interface is used for intellisense for the 'Theme' useContext*/\nexport interface ThemeContextInterface{\n    theme:Theme\n    setTheme:Function\n}\n\nexport const themeContextObject:ThemeContextInterface = {theme:0, setTheme:()=>{}}\n\n/**This is the global 'Theme' context*/\nexport const themeContext = createContext(themeContextObject)","import React from \"react\";\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, Platform, View } from \"react-native\";\nimport { v4 } from \"uuid\";\nimport GetColor, { borderRadius, Color, margin, paddingRadius, shadowRadius } from \"./styleconfig\";\nimport PixelSpacer from \"./pixel-spacer\";\nimport { platform } from \"os\";\n\n\nexport default function BasicButton(props){\n    const {onPress, title} = props;\n    function getViewStyle(){\n        if(Platform.OS == \"web\") { return {margin:margin(), backgroundColor:GetColor(Color.Button), padding: paddingRadius(), borderRadius:borderRadius(),shadowRadius:shadowRadius()}}\n        else{return {margin:margin(), padding: paddingRadius(), borderRadius:borderRadius(),shadowRadius:shadowRadius()}}\n    }\n    \n\n    return(\n    <View style={getViewStyle()}>\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} \n        disabled = { props.disabled} key={ props.key} testID={props.testID}/> \n    </View>)\n}","import React, { useState } from \"react\";\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\nimport BasicButton from \"./basicbutton\";\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"./styleconfig\";\nimport FlexSpacer from \"./flex-spacer\";\nimport PixelSpacer from \"./pixel-spacer\";\n\n\n\nexport default function BasicModal(props){\n  let child = props.child\n  const openTitle = props?.openTitle ?? \"null open title\"\n  \n\n  const [show, setShow] = useState(false);\n  const styles = StyleSheet.create({\n    modalView: {\n      flexDirection:\"column\",\n      flex:1,\n      alignContent:\"center\", justifyContent:\"center\",alignItems:\"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 0\n      }\n  }\n});\n\n    return(\n      <View>\n        <View style={{alignItems:\"center\", justifyContent:\"center\"}}>\n          {/* Main Modal  */}\n          <Modal\n            animationType=\"slide\"\n            transparent={true}\n            visible={show}\n            onRequestClose={() => {setShow(!show)}}>\n            <View style={ styles.modalView}>\n              <View style={{ margin:margin(),padding:paddingRadius(), borderRadius:borderRadius(), backgroundColor:GetColor(Color.ModalBackground), borderWidth:5}}>\n                  {child}\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\n              </View>\n            </View>\n          </Modal>\n          {/* Main Modal  */}\n        </View>\n\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\n\n      </View>)\n      \n}\n\n\n\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport React from \"react\";\nimport { View } from \"react-native\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\n\nexport default  function LogoutButton(props){\n    return (\n        <View>\n            <BasicButton title={\"Logout\"} onPress={()=>{\n                AsyncStorage.removeItem(\"user\");\n                props.setPage(0);\n            }} />\n        </View>\n    )\n}","import React, { useContext, useEffect } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { appContext } from \"../../classes-interface/app-conext\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport LogoutButton from \"../pages/logoutButton\";\n\n\n\n\n\nexport default function NavBar(props){\n    const context = useContext(appContext)\n\n    function ManagerOptions(props){\n        console.log(context.user.isManager);\n        if(context.user.isManager){ \n            return (\n            <>\n                <View><BasicButton title={\"View Employee Status\"} onPress={ ()=>{props.setPageIndex(4)}}/></View>\n                <View ><BasicButton title={\"Review Problems\"} onPress={ ()=>{props.setPageIndex(5)}}/></View>\n            </>)}\n        else{return <></>}\n    }\n\n    if(Platform.OS == \"web\"){\n        return (\n            <View style={{flexDirection:\"row\", alignSelf:\"stretch\",justifyContent:\"center\"}}>\n                <View><BasicButton title={\"View Request\"} onPress={ ()=>{props.setPageIndex(1)}}/></View>\n                <View ><BasicButton title={\"Manage Events\"} onPress={ ()=>{props.setPageIndex(2)}}/></View>\n                <View ><BasicButton title={\"Time Sheet\"} onPress={ ()=>{props.setPageIndex(3)}}/></View>\n                < ManagerOptions setPageIndex={props.setPageIndex}/>\n                <View ><LogoutButton setPage={props.setPageIndex}/></View>\n            </View>)\n    }\n    else{\n        return (\n                <BasicModal openTitle={\"Navigation\"} child={\n                <View style={{flexDirection:\"column\", alignSelf:\"stretch\",justifyContent:\"center\"}}>\n                    <View ><BasicButton title={\"View Request\"} onPress={ ()=>{props.setPageIndex(1)}}/></View>\n                    <View ><BasicButton title={\"Manage Events\"} onPress={ ()=>{props.setPageIndex(2)}}/></View>\n                    <View ><BasicButton title={\"Time Sheet\"} onPress={ ()=>{props.setPageIndex(3)}}/></View>\n                    < ManagerOptions setPageIndex={props.setPageIndex}/>\n                    <View ><LogoutButton setPage={props.setPageIndex}/></View>\n                </View>\n                }/>\n            )\n    }\n\n}","import React from 'react'\nimport { View,Text, Platform } from 'react-native'\nimport GetColor, { Color } from './styleconfig'\n\n\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\nexport default function BasicText(props){\n    const {text} = props\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\n    //This will grab from the props the type of text for styling\n    // is not found, it will default to general text\n    const textType:TextType = props.textType\n    let textColor = Color.Text\n    let textAlign:string = \"auto\";\n    if(props?.textAlign) {textAlign =props?.textAlign  }\n    return (\n    <View style={{margin:5}}>\n        <Text style={{color:GetColor(textColor), fontSize:getTextFontSize(textType),textAlign:getAlignment(textAlign,textType) }}>{text}</Text>\n    </View>)\n}\n\n\n\n/**The type */\nexport enum TextType{\n    Title,\n    Header,\n    General\n}\nfunction getAlignment(textAlign:string,textType:TextType){\n    const tempAlign = textAlign ?? \"auto\"\n    switch(textType){\n        case TextType.Title:{return \"center\"}\n        case TextType.Header:{return \"center\"}\n        case TextType.General:{return tempAlign}\n        default : {return tempAlign}\n\n    }\n}\n\nfunction getTextFontSize(textType:TextType){\n    if(Platform.OS == \"web\"){\n        switch(textType){\n            case TextType.Title  :  {return 50}\n            case TextType.Header:  {return 30}\n            case TextType.General:  {return 20}\n            // The default case should be exactly the same as the general text as an edge case\n            default              :  {return 20}\n            }\n    }\n    else{\n        switch(textType){\n            case TextType.Title  :  {return 30}\n            case TextType.Header:  {return 20}\n            case TextType.General:  {return 10}\n            default              :  {return 10}\n        }\n    }\n}","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { Employee, WorkLog } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\nexport interface EmployeeHandlerInterface{\n    /**gets all logs for manager*/\n    getWorklogs(): Promise<WorkLog[]>\n\n    getWorklogByID(id:number): Promise<WorkLog>\n\n    clockin(wId:number , type: string ): Promise<WorkLog>\n    \n    clockout(wId:number , type: string): Promise<WorkLog>\n    \n    login(username:string, password:string): Promise<Employee>\n    \n\n}\n\n\nexport default class employeeAPIHandler implements EmployeeHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.121.72.15:3000\";\n    private devMode:boolean = false;\n    private loginUrl = \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n    private IndexURL =0;\n    /* private context = useContext(appContext); */\n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n    }\n\n    async getWorklogs() {\n        const response = await axios.get(this.getURL()+\"/worklogs\");\n        const data:WorkLog[] = response.data;\n        return data;    \n    }\n\n    async getWorklogByID(id:number) {\n        const response = await axios.get(this.getURL()+\"/worklogs\");\n        const filter = response.data.filter(w => w.id === id);\n        const data:WorkLog = filter[0];\n        return data;\n    }\n    \n    async clockin(wId:number , type: string) {\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\n            wId:wId,\n            type:type\n        });\n        const data:WorkLog = response.data;\n        return data;    \n    }\n\n    async clockout(wId:number , type: string) {\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\n            wId:wId,\n            type:type\n        });\n        const data:WorkLog = response.data;\n        return data;    \n    }\n\n    async login(username:string, password:string) {\n        try {\n            const response = await axios.patch(this.getURL()+ \"/login\",{\n                username:username,\n                password:password\n            });\n            const data:Employee = response.data;\n            return data;\n        } catch (error) {\n            console.log(\"Login failed\");\n        }\n}\n\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { appContext } from \"../../classes-interface/app-conext\";\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\";\n\n\n\n\nexport default function ClockingScreen(){\n    const context = useContext(appContext)\n\n    const [clockCheck, setClockCheck] = useState(false)\n    const handler = new employeeAPIHandler()\n    useEffect(() => {\n        syncClock()\n        return () => {}}, [])\n\n    async function syncClock(){\n        const workLog = await handler.getWorklogByID(context.user.id)\n        if(workLog.type == \"CHEKIN\" ){setClockCheck(true)}\n        else{setClockCheck(false)}\n    }\n\n    function changeClockText(){\n        if(clockCheck){return \"Clock Out\"}\n        else{return \"Clock-In\"}\n    }\n    \n    async function changClockStatus(){\n        setClockCheck(!clockCheck);\n        if(!clockCheck) await handler.clockin(context.user.id,\"Clock-In\")\n        else await handler.clockout(context.user.id,\"Clock-In\") \n    }\n\n    return(\n        <View style={{borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), backgroundColor:GetColor(Color.SecondaryColor)}}>\n            <BasicText text={\"Clock Status\"} textType={TextType.Title}/>\n            <BasicText text={changeClockText()} textType={TextType.Header} textAlign={\"center\"}/>\n            <BasicButton title={'Change Status'} onPress={changClockStatus}/>\n        </View>)\n\n}","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { Event } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\n\n\nexport interface EventHandlerInterface{\n    getAllEvents(): Promise<Event[]>      \n    /**put -> cancel*/\n    cancelEvent(id:string): Promise<Event>\n    /**put -> update*/\n    updateEvent(id:string, event:Event): Promise<Event>\n    /**post -> create*/\n    createEvent(event:Event): Promise<Event>\n\n    getEventByID(id: string): Promise<Event>\n\n}\n\n\nexport default class EventAPIHandler implements EventHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.121.72.15:3000\";\n    private devMode:boolean = false;\n    private IndexURL = 0;\n    //private context = useContext(appContext);\n    \n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n    }\n\n    async getAllEvents(): Promise<Event[]> {\n        const response = await axios.get(this.getURL()+\"/events\");\n        const data:Event[] = response.data;\n        return data;    \n    }\n    \n    async cancelEvent(id:string) {\n        const response = await axios.put(this.getURL()+\"/events\",\n        {\n            id:id,\n            status:\"Cancelled\"\n        });\n        const data:Event = response.data;\n        return data;\n        }\n        \n    async createEvent(event:Event) {\n        const response = await axios.post(this.getURL()+\"/events\",event);\n        const data:Event = response.data;\n        return data;\n    }\n\n    async getEventByID(id: string) {\n        const response = await axios.get(this.getURL()+\"/events/\"+id);\n        const data:Event = response.data;\n        return data;\n    }\n\n    async updateEvent(id:string, event:Event) {\n        const response = await axios.put(this.getURL()+\"/events\",\n        {\n            id:id,\n            ...event\n        });\n        const data:Event = response.data;\n        return data;\n    }\n        \n}\n","import React from \"react\";\nimport { TextInput, View } from \"react-native\";\nimport GetColor, { borderRadius, Color, margin, paddingRadius, shadowRadius } from \"./styleconfig\";\n\n\nexport default function BasicInputText(props){\n    const {value, onChangeText, placeholder} = props;\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\n    const keyboardType = props?.keyboardType ?? 'default';\n    const editable = props?.editable ?? true;\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\n    const textAlign = props?.textAlign ?? 'center'\n\n    return(\n    <View style={{backgroundColor:GetColor(Color.InputText), borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), shadowRadius:shadowRadius()}}> \n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \n        keyboardType={keyboardType} editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}\n        style={{fontSize:20,textAlign:textAlign}} \n        />\n    </View>)\n}\n","import { useEffect, useState } from \"react\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport { Event as Evvent } from \"../../classes-interface/api-entities\"\nimport UpdateAllEventsState from \"./update-allEvents-state\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\nimport { View, Text } from \"react-native\";\n\nexport default function CreateEventOption(props:{allEvents: Evvent[], setAllEvents: Function}){\n\n    const [title, setTitle] = useState<string>(\"\")\n    const [desc, setDesc] = useState<string>(\"\")\n    const [date, setDate] = useState(new Date());\n    //const [time, settime] = useState(new Date())\n    const [showDateAndTime, setShowDateAndTime] = useState(false)\n    const [showDatePicker, setShowDatePicker]= useState(false)\n    const [showStartTimePicker, setShowStartTimePicker]= useState(false)\n    const [showEndTimePicker, setShowEndTimePicker] = useState(false)\n    const [startTime, setStart] = useState(()=>{let date = new Date(); if (date.getHours() > 12) {date.setHours(date.getHours()-12); return date} else{return date}})\n    const [endTime, setEnd] = useState(()=>{let date = new Date(); if (date.getHours() > 12) {date.setHours(date.getHours()-12); return date} else{return date}})\n    const [startAntePost, setStartAntePost] = useState(\"PM\")\n    const [endAntePost, setEndAntePost] = useState(\"PM\")\n    const [location, setLocation] = useState<string>(\"\")\n\n    //<BasicText text={(`${(new Date(context.reservationData.checkOut ?? 'N/A')).toDateString()} At: ${(new Date(context.reservationData.checkOut ?? \"N/A\")).toLocaleTimeString() }`)}/>\n    //useEffect(()=>{setTimeout(()=>setShowDateAndTime(false),300)  }, [endTime])\n\n    function formattedStartTime(time: Date){\n        const hours = time.getHours()\n\n        if (hours < 1 || hours > 12){\n            time.setHours(time.getHours() -12)\n            //setStart(time || startTime)\n        }\n        // else{\n        //     setStart(time || startTime)\n        // }\n\n        if (hours < 12) setStartAntePost('AM')\n        else setStartAntePost(\"PM\")\n        const formattedTime = time.toLocaleTimeString().slice(0,-3)\n        return(`${formattedTime} ${startAntePost}`)\n    }\n\n    function formattedEndTime(time: Date){\n        const hours = time.getHours()\n        if (hours < 1 || hours > 12){\n            time.setHours(time.getHours() -12)\n            setEnd(time || startTime)\n        }\n        else{\n            setEnd(time || startTime)\n        }\n\n        if (hours < 12) setEndAntePost('AM')\n        else setEndAntePost(\"PM\")\n\n    }\n\n    function RenderStartTime(){\n        return(\n            <DateTimePicker\n            testID=\"dateTimePicker\"\n            value={startTime}\n            mode={'time'}\n            is24Hour={false}\n            display=\"clock\"\n            onChange={(event, selectedTime: Date)=>{console.log(\"start on change\", selectedTime.toLocaleTimeString()); setShowStartTimePicker(false); setStart(selectedTime || startTime)}}\n        />) \n    }\n\n    function RenderEndTime(){\n        return(\n            <DateTimePicker\n            testID=\"dateTimePicker\"\n            value={endTime}\n            mode={'time'}\n            is24Hour={false}\n            display=\"clock\"\n            onChange={(event, selectedTime: Date)=>{console.log(\"end on change\",selectedTime.toLocaleTimeString()); setShowEndTimePicker(false); setEnd(selectedTime || endTime)}}\n        />) \n    }\n\n    function RenderDate(){\n        return(<DateTimePicker\n            testID=\"dateTimePicker\"\n            value={date}\n            mode={'date'}\n            is24Hour={false}\n            display=\"default\"\n            onChange={(event, selectedDate)=>{console.log(\"date on Change\"); setShowDatePicker(false); setDate(selectedDate || date)}}/> \n        )\n    }\n\n    function DateAndTime(){\n        if (showDateAndTime){\n            if(showDatePicker){\n                return (<RenderDate/>)\n            }\n            else if(showStartTimePicker){\n                return (\n                    <RenderStartTime/>\n                )\n            }\n            else if (showEndTimePicker )\n                {return (<RenderEndTime/>)}\n            else return (<></>)\n        }\n        else return (<></>) \n    }\n\n    const createEventStates = {title: title, desc: desc, startTime: startTime, endTime: endTime, location: location, allEvents: props.allEvents, setAllEvents: props.setAllEvents, startAntePost: startAntePost, endAntePost: endAntePost}\n\n    //console.log(showDatePicker)\n    function InputFields(inputFieldsProps){\n        return(\n            <>\n                <BasicInputText value={title} onChangeText={setTitle} placeholder={'title'}/>\n                <BasicInputText value={desc} onChangeText={setDesc} placeholder={'description'}/>\n                <BasicInputText value={location} onChangeText={setLocation} placeholder={'location'}/>\n                <BasicButton onPress={()=>{setShowDatePicker(true); setShowStartTimePicker(true); setShowEndTimePicker(true); setShowDateAndTime(true); }  } title={'set date and time'}/>\n                <DateAndTime/>\n                <BasicText text={`Start Date: ${date.toDateString()}`}/>\n                <BasicText text={`Start Time: ${startTime.toLocaleTimeString().slice(0,-3)}`}/>\n                <BasicText text={`End Time: ${endTime.toLocaleTimeString().slice(0,-3)}\\n\\n`}/>\n                {/* <BasicInputText value={startTime ?? ''} onChangeText={setStart} placeholder={'start time'} keyboardType={'numeric'}/> */}\n                {/* <BasicInputText value={endTime ?? ''} onChangeText={setEnd} placeholder={'end time'}/> */}\n                <BasicButton onPress={()=>UpdateAllEventsState(inputFieldsProps)} title={'Update Event List'}/>\n            </>\n        )\n    }\n\n    return(\n        <BasicModal child={InputFields(createEventStates)} openTitle={\"Create Event\"}/>\n    )\n}\n","import { Event as Evvent } from \"../../classes-interface/api-entities\"\n\nexport default function UpdateAllEventsState(props){\n    const newEvent: Evvent = {\n        id:'random',\n        title:props.title,\n        desc:props.desc,\n        startTime:props.startTime,\n        endTime:props.endTime,\n        location:props.location,\n        status:\"On Schedule\"\n    }    \n    //const allEventsClone = props.allEvents\n    props.allEvents.push(newEvent)\n    console.log(\"🚀 ~ file: event-creation-option.tsx ~ line 26 ~ UpdateEventList ~ props.allEvents\", props.allEvents)\n\n    props.setAllEvents([...props.allEvents]) //update parent state. The [...] is needed to create a new array in memory!!\n\n}","export default function FormattedTime(time: Date){\n    time.toLocaleString()\n    const hours = time.getHours()\n    let AMorPM = \"\"\n    if (hours < 1 || hours > 12){\n        time.setHours(time.getHours() -12)\n    }\n    if (hours < 12) AMorPM = 'AM'\n    else AMorPM = 'PM'\n    const formattedTime = time.toLocaleTimeString().slice(0,-3)\n    return(`${formattedTime} ${AMorPM}`)\n}\n\nexport function GetDateFromNum(num: number){\n    const date = new Date(num * 1000).toUTCString()\n    console.log(date)\n    return date\n}","import React from \"react\"\nimport { View } from \"react-native\"\nimport { Event as Evvent } from \"../../classes-interface/api-entities\"\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\"\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\"\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\"\nimport FormattedTime from \"./event-date-formatting\"\n\n\nexport default function FormatSingleEvent(props:{event: Evvent, index:number, allEvents?: Evvent[], setAllEvents?: Function, filter?: string}){\n    const {id,title,desc,startTime,endTime,location,status} = props.event   \n    \n    const startTimeToDate = new Date(startTime)\n    const endTimeToDate = new Date(endTime)\n    const startTimeFormatted = FormattedTime(startTimeToDate)\n    const endTimeFormatted = FormattedTime(endTimeToDate)\n\n    function CancelEvent(id: string){\n        const newEventList = props.allEvents.map(event=> {\n            if(event.id === id) {event.status = \"Cancelled\"; return(event)} \n            else{return event} \n        })\n        props.setAllEvents([...newEventList])\n    }\n\n    return (\n        <View style={{borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), backgroundColor:GetColor(Color.SecondaryColor)}}>\n        {props.filter === id || !props.filter ?\n        <>\n            <BasicText text={`\\n\\n Event ${props.index + 1}`}/>\n            <BasicText text={`id: ${id}`}/>\n            <BasicText text={`title: ${title}`}/>\n            <BasicText text={`description: ${desc}`}/>\n            <BasicText text={`start time: ${startTimeFormatted}`}/>\n            <BasicText text={`end time: ${endTimeFormatted}`}/>\n            <BasicText text={`location: ${location}`}/>\n            <BasicText text={`status: ${status}`}/>\n            <BasicButton title={\"Cancel Event\"} onPress={()=>CancelEvent(props.event.id)}></BasicButton>\n        </> \n\n        :\n        \n        null}</View>)\n}","import { useEffect, useState } from \"react\";\nimport { ProgressViewIOSComponent } from \"react-native\";\nimport EventAPIHandler, {EventHandlerInterface} from \"../../classes-interface/eventhandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\n\n\nexport default function GetEventByID(props:{setFilteredEventID: Function}){\n    const [eventID, setEventID] = useState<string>(\"\")\n    useEffect(()=>{props.setFilteredEventID(eventID)}, [eventID])\n    return(\n        <>\n            {/* <BasicButton title={\"Search For An Event\"} onPress={()=>FilterEvents()}/> */}\n            <BasicInputText value={eventID} onChangeText={setEventID} placeholder={'Event ID'}/>\n        </>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { FlatList, ScrollView, View, Text } from \"react-native\"\nimport { Event } from \"../../classes-interface/api-entities\"\nimport EventAPIHandler, { EventHandlerInterface } from \"../../classes-interface/eventhandler\"\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\"\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\"\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\"\nimport CreateEventOption from \"../children/create-event-option\"\nimport FormatSingleEvent from \"../children/format-single-event\"\nimport GetEventByID from \"../children/get-event-by-ID\"\n\nexport default function EventsPage(){\n    const eventhandle: EventHandlerInterface = new EventAPIHandler(false)\n    const dummyEvents: Event[] = [] /* = [{\n            id: 'dummyevent1',\n            title: 'title',\n            desc: 'desc',\n            startTime: 100,\n            endTime: 200,\n            location: 'location',\n            status: \"On Schedule\"\n        },\n        {\n            id: 'dummyevent2',\n            title: 'title2',\n            desc: 'desc2',\n            startTime: 300,\n            endTime: 400,\n            location: 'location2',\n            status: \"Cancelled\"\n        }\n    ] */\n    const [allEvents, setAllEvents] = useState(dummyEvents)\n    const [filteredEventID, setFilteredEventID] = useState<string>(\"\")\n\n    useEffect(() => {\n        setAll()\n    }), []\n\n    async function setAll(){\n        const events = await eventhandle.getAllEvents()\n        setAllEvents(events)\n    }\n\n    //map all events into a scroll list\n    function FormattedEventsList(){\n        const formattedEvents = allEvents.map((event, index) => {return <FormatSingleEvent event={event} index={index} allEvents={allEvents} setAllEvents={setAllEvents} filter={filteredEventID}/>})        \n        return(\n            <View>\n                <ScrollView>\n                {formattedEvents}\n                </ScrollView>\n            </View>\n        )\n    }\n    return(\n        <View >\n                <BasicText text={\"Manage events\"} textType={TextType.Title}/>\n                <GetEventByID setFilteredEventID={setFilteredEventID}/>\n                <CreateEventOption allEvents={allEvents} setAllEvents={setAllEvents}/>\n                <FormattedEventsList/>\n        </View>)\n}\n","import React from \"react\";\nimport { View } from \"react-native\";\n\n\n/**this is a component for spacing elements with flex box. @attribute space will give a flex number for spacing*/\nexport default function FlexSpacer(props){\n    const space:number = props?.space ?? 1;\n    return(<View style={{flex:space}} />)\n}","import React from \"react\"\nimport { View } from \"react-native\"\n\n\n/**this is a component for spacing elements with absolute pixels. @attribute height, width will default to 0. others include minWidth, maxWidth, minHight, maxHight*/\nexport default function PixelSpacer(props){\n    const height = props?.height ?? 0\n    const width = props?.width ?? 0\n    const {minHeight,minWidth,maxHeight,maxWidth} = props\n\n\n    return(<View style={{height:height, width:width, minHeight, minWidth, maxHeight, maxWidth}}/>)\n}","import React, { useContext, useState } from \"react\";\nimport { Dimensions, Platform, View } from \"react-native\";\nimport { appContext, AppContextInterface } from \"../../classes-interface/app-conext\";\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\nimport FlexSpacer from \"../../SafariSolaceStyleTools/flex-spacer\";\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\n\n\n\nexport default function LoginPage(props) {\n  const context: AppContextInterface = useContext(appContext)\n\n  async function tryLogin(userName:string, password:string) {\n    const employee = new employeeAPIHandler(false);\n    \n    const response = await employee.login(userName, password);\n    const emp = response;\n    console.log(emp);\n    setPage();\n    if(emp.username === userName && emp.password === password){     \n      context.setUser(emp);\n    }\n  }\n\n  function setPage(){\n    props.setPage(1);\n    alert(\"Be sure to clock in! \");\n  }\n\n  function PageDisplay(){\n    const [userName, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    if(Platform.OS == \"web\"){\n      return(\n        <View >\n      <View style={{justifyContent:\"center\", alignItems:\"center\"}}><BasicText text={\"Welcome to\\nSafari Solace Helper\"} textType={TextType.Title} textAlign={\"center\"} /></View>\n      <PixelSpacer height={5} />\n      <View style={{ flexDirection:\"row\"}}>\n        <FlexSpacer space={1} />\n        <View style={{flex:3, flexDirection:\"column\"}}>\n          <BasicInputText value={userName} onChangeText={t => setUserName(t)} placeholder={\"Username\"}/>\n          <BasicInputText value={password} onChangeText={t => setPassword(t)} placeholder={\"Password\"}/>\n          <View style={{flexDirection:\"row\"}}>\n            <FlexSpacer space={1} />\n            <View style={{flex:3}}><BasicButton title={\"Login\"} onPress={()=>tryLogin(userName, password)} /></View>\n            <FlexSpacer space={1} />\n          </View>\n        </View>\n        <FlexSpacer space={1} />\n      </View>\n    </View>\n      )\n    }\n    else{\n      return(\n        <View >\n      <View style={{justifyContent:\"center\", alignItems:\"center\"}}><BasicText text={\"Welcome to\\nSafari Solace Helper\"} textType={TextType.Title} textAlign={\"center\"} /></View>\n      <PixelSpacer height={5} />\n      <View style={{ flexDirection:\"row\"}}>\n        <FlexSpacer space={1} />\n        <View style={{flex:5, flexDirection:\"column\"}}>\n          <BasicInputText value={userName} onChangeText={t => setUserName(t)} placeholder={\"Username\"}/>\n          <BasicInputText value={password} onChangeText={t => setPassword(t)} placeholder={\"Password\"}/>\n          <View style={{flexDirection:\"row\"}}>\n            <FlexSpacer space={1} />\n            <View style={{flex:10}}><BasicButton title={\"Login\"} onPress={()=>tryLogin(userName, password)} /></View>\n            <FlexSpacer space={1} />\n          </View>\n          <PixelSpacer height={Dimensions.get(\"window\").width*.50}/>\n        </View>\n        <FlexSpacer space={1} />\n      </View>\n    </View>\n      )\n    }\n  }\n\n\n  return (<PageDisplay/>  )\n}\n","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { Problem } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\nexport interface ProblemHandlerInterface{\n    getAllProblems():Promise <Problem[]>\n\n    getByProblemID(id:string) : Promise<Problem>\n\n    markReviewed(id:string, status:string) : Promise<Problem>\n}\n\nexport default class ProblemAPIHandler implements ProblemHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.121.72.15:3000\";\n    private devMode:boolean = false;\n    private IndexURL =0;\n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n\n    }\n    async getAllProblems():Promise <Problem[]> {\n        const response = await axios.get(this.getURL()+\"/problems\");\n        const data:Problem[] = response.data;\n        return data;    \n    }\n\n    async getByProblemID(id:string) {\n        const response = await axios.get(this.getURL()+\"/problems/\"+id);\n        const data:Problem = response.data;\n        return data;    \n    }\n\n    async markReviewed(id:string, status:string) {\n        const response = await axios.put(this.getURL()+\"/problems/\"+id,\n        {\n            id:id,\n            status:status\n        });\n        const data:Problem = response.data;\n        return data;\n    }\n\n\n\n}\n\n\n//export const httpHandler1 = new ProblemAPIHandler(false, 1);","import { Problem } from \"../../classes-interface/api-entities\";\nimport ProblemAPIHandler, { ProblemHandlerInterface } from \"../../classes-interface/problemhandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\n\nexport default function ProblemItem(props: Problem){\n\n    const {id, desc, submittedTime, status, photoLink} = props;\n\n    const handler: ProblemHandlerInterface = new ProblemAPIHandler();\n\n    function setReviewed(){\n        handler.markReviewed(id, \"Reviewed\");\n    }\n\n    function renderPage(){\n        return(<>\n        <BasicText text={`ID: ${id}`} textType={TextType.Title}/>\n            <BasicText text={`Description: ${desc}`} textType={TextType.Header}/>\n            <BasicText text={`Time Submitted: ${submittedTime}`} textType={TextType.Header}/>\n            <BasicText text={`Status: ${status}`} textType={TextType.Header}/>\n            {photoLink ? <BasicButton onPress={()=>{window.location.href=photoLink}} title={\"Download Photo\"}/> : <BasicText text={\"No uploaded image...\"}/>}\n            <BasicButton onPress={setReviewed} title={\"Mark as reviewed\"}/>\n        </>)\n    }\n    return(<>\n        <BasicModal child={renderPage()} openTitle={desc}/>\n    </>)\n}","import React, { useEffect, useState } from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport { Problem } from \"../../classes-interface/api-entities\";\nimport ProblemAPIHandler, { ProblemHandlerInterface } from \"../../classes-interface/problemhandler\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\nimport ProblemItem from \"../children/problem-item\";\n\nexport default function ProblemView(){\n\n    const testproblemList: Problem[] = [\n        {id: \"aa9cc399-a64b-4a10-b6ed-4f4aca673e9f\",\n        desc: \"Test Problem!\",\n        submittedTime: 1644428469371,\n        status: \"Unreviewed\",\n        photoLink: \"https://projstorage0.blob.core.windows.net/images/24026990290640815-Receipt.jpg\"},\n        {id: \"aa9cc399-a64b-4a10-b6ed-4f4aca673e88\",\n        desc: \"Test Problem1!\",\n        submittedTime: 1644428469372,\n        status: \"Unreviewed\"}\n    ]\n\n    const [problemList, setProblemList] = useState([... testproblemList]);\n\n    const handler: ProblemHandlerInterface = new ProblemAPIHandler(false);\n\n    //useEffect(()=>{setter()},[]);\n\n    async function setter(){\n        const response: Problem[] = await handler.getAllProblems();\n        const pendingProblems: Problem[] = response.filter(p => p.status === \"Unreviewed\"); \n        setProblemList(pendingProblems);\n    }\n\n    const problemItems = problemList.map(p => <ProblemItem key={p.id} {...p}/>)\n\n    return(<View>\n        <BasicText text={'Current Problems'} textType={TextType.Title}/>\n        <ScrollView>\n            {problemItems}\n        </ScrollView>\n\n    </View>)\n}","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { ServiceRequest } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\n\nexport enum sortType {\n   Ordered ,\n   Processing,\n   Completed ,\n   Cancelled,\n   All\n}\n\nexport interface RoomServiceHandlerInterface{\n    /**sorting by type! All, completed, processing, ordered, canceled*/\n    getAllRequest(type:sortType): Promise<ServiceRequest[]>\n    markAsProcessed(id:string): Promise<ServiceRequest>\n    markAsCompleted(id:string) : Promise<ServiceRequest>\n}\n\nexport default class RoomServiceHandlerAPIHandler implements RoomServiceHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.121.72.15:3000\";\n    private devMode:boolean = false;\n    private IndexURL =0;\n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n\n    }\n    \n    async getAllRequest(type: sortType) {\n        const response = await axios.get(this.getURL()+\"/servicerequests\");\n        const data:ServiceRequest[] = response.data;\n        if(type == sortType.All){\n            return data;\n        }else{\n            let newData:ServiceRequest[] = [];\n            for(let i=0; i<data.length; i++){\n                if(data[i].status == sortType[type]){\n                    newData.push(data[i]);\n                }\n            }\n            return newData;\n        }\n    }\n\n    async markAsProcessed(id:string) {\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\n            status: \"Processing\"\n        });\n        const data:ServiceRequest = response.data;\n        return data;\n    }\n    async markAsCompleted(id:string) {\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\n            status: \"Completed\"\n        });\n        const data:ServiceRequest = response.data;\n        return data;\n    }\n\n}\n\n\nexport const httpHandler1 = new  RoomServiceHandlerAPIHandler(false, 1);","import React, { useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Offering, ServiceRequest } from \"../../classes-interface/api-entities\";\nimport RoomServiceHandlerAPIHandler from \"../../classes-interface/room-service-handler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\n\n\n\n\nexport default function RoomServiceRequest(props){\n    const initServiceRequest:ServiceRequest = props.serviceRequest\n    const [serviceRequest, setServiceRequest] = useState(initServiceRequest)\n\n\n    const handler = new RoomServiceHandlerAPIHandler()\n    \n\n    function SwitchButtonDisplay(){\n        if(serviceRequest.status == \"Ordered\" )          return <BasicButton title={' Start Order'} onPress={()=>{ /*handler.markAsProcessed(serviceRequest.id);*/ }} />\n        else if(serviceRequest.status ==  \"Processing\" ) return <BasicButton title={' Mark order as complete'} onPress={()=>{ /*handler.markAsCompleted(serviceRequest.id);*/ }} />\n        else                                             return <></>\n    }\n\n    function SwitchStatusDisplay(){\n        return(<View style={{flexDirection:\"row\"}}>\n            <BasicText text={\"Status\"}/><BasicText text={serviceRequest?.status ?? \"Ordered\"}/><SwitchButtonDisplay/>\n        </View>)\n    }\n\n    function GetOfferingString(){\n        let tempString:string= '';\n        try {\n            if(serviceRequest.requestedOffering?.length <1){return 'In valid request in the system'}\n            for(let i =0; i < serviceRequest.requestedOffering.length; i ++){\n                if(i==0){tempString+= `\\t-${serviceRequest.requestedOffering[i].desc}`;}\n                else{tempString+= `\\n\\t-${serviceRequest.requestedOffering[i].desc}`;}\n            }\n            if(!tempString) return 'In valid request in the system'\n            return 'Hello'\n        } catch (error) {\n            return 'In valid request in the system'\n        }\n    }\n\n\n    function RequestDisplay(){\n        const dateDisplay = (new Date(serviceRequest.created))\n        return(\n        <>\n            <BasicText text={`Room: ${serviceRequest.room}`}/>\n            <BasicText text={`Created: ${dateDisplay.toDateString()}, at ${dateDisplay.toLocaleTimeString()}`}/>\n            <View><BasicText text={'Requested Offerings:'}/><BasicText text={GetOfferingString()}/></View>\n            <SwitchStatusDisplay/>\n        </>)\n    }\n\n    return(\n    <>\n        <BasicModal openTitle ={(props?.openTitle ?? \"null open title\")} child={<RequestDisplay/>}/>\n    </>)\n}","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, FlatList, Platform, ScrollView, View } from \"react-native\";\nimport { v4 } from \"uuid\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\nimport RoomServiceRequest from \"../children/room-service-request\";\nimport {Offering, ServiceRequest} from '../../classes-interface/api-entities';\nimport RoomServiceHandlerAPIHandler, { sortType } from \"../../classes-interface/room-service-handler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\n\n\n\n\nexport default function RoomService(){\n\n    const dummyArray:ServiceRequest[] = []\n    const [data, setData] = useState(dummyArray);\n    const [sort, setSort] = useState(sortType.All)\n    const handler = new RoomServiceHandlerAPIHandler(false)\n    const [displayList, setDisplayList] = useState([<></>])\n    \n\n    useEffect(() => {\n        grabServiceRequest(sortType.All)\n    \n      return () => {\n        \n      }\n    }, [])\n    \n\n\n    \n\n\n    async function grabServiceRequest(type:sortType){\n    try {\n            const foundRequest = await handler.getAllRequest(type);\n            console.log(foundRequest)\n            if(foundRequest) {setData(foundRequest);setSort(type);displaySwitch()}\n        } catch (error) {\n            console.log('Failed to sort request')\n        }\n    }\n\n   function FilterButtons(){\n       if(Platform.OS == \"web\"){\n        return( \n        <View>\n            <BasicText text={`Filtering Type: ${sortType[sort]}`} textType={TextType.Header}/>\n                <View style={{flexDirection:\"row\", alignSelf:\"stretch\"}}>\n                <View style={{flex:1}}><BasicButton title={'All'} onPress={()=> grabServiceRequest(sortType.All)} /></View>\n                <View style={{flex:1}}><BasicButton title={'Ordered'} onPress={()=> grabServiceRequest(sortType.Ordered)} /></View>\n                <View style={{flex:1}}><BasicButton title={'Processing'} onPress={()=> grabServiceRequest(sortType.Processing)} /></View>\n                <View style={{flex:1}}><BasicButton title={'Complete'} onPress={()=> grabServiceRequest(sortType.Completed)} /></View>\n            <View style={{flex:1}}><BasicButton title={'Cancelled'} onPress={()=> grabServiceRequest(sortType.Cancelled)} /></View>\n        </View>\n        \n        </View>)\n       }\n       else{\n        return( \n                <BasicModal openTitle={`Filtering Type: ${sortType[sort]}`} child={\n                    <View style={{flexDirection:\"column\", alignSelf:\"stretch\",justifyContent:\"center\"}}>\n                        <PixelSpacer width={Dimensions.get(\"screen\").width*0.60} height={1}/> \n                        <BasicButton title={'All'} onPress={()=> grabServiceRequest(sortType.All)} />\n                        <BasicButton title={'Ordered'} onPress={()=> grabServiceRequest(sortType.Ordered)} />\n                        <View ><BasicButton title={'Processing'} onPress={()=> grabServiceRequest(sortType.Processing)} /></View>\n                        <View><BasicButton title={'Complete'} onPress={()=> grabServiceRequest(sortType.Completed)} /></View>\n                        <View ><BasicButton title={'Cancelled'} onPress={()=> grabServiceRequest(sortType.Cancelled)} /></View>\n                    </View>\n                }/>)\n       }\n   }\n\n   \n/*       function Testing(){\n        let testStack:ServiceRequest[] =[]\n        for(let i =0; i <10; i++ ){\n            let dummyOffering:Offering={\n                desc: \"Testing\",\n                cost: 0\n            }\n            const T = \"Completed\"\n            let dummy:ServiceRequest = {\n                id: `EXRoom${i}`,\n                room: `EXRoom${i}`,\n                created: (Math.random()*100000000),\n                status: T ,\n                requestedOffering: [dummyOffering,dummyOffering,dummyOffering]\n            }\n\n            testStack.push( dummy )\n        }\n        setData(testStack);\n    } */\n\n    function displaySwitch(){\n        if(data?.length >0){\n            setDisplayList(data.map((item)=>{ return <RoomServiceRequest  key={v4()} openTitle = {`Room: ${item?.room ?? 'Invalid'}, ${item?.status ?? 'Invalid'}`} serviceRequest={item}/>})  )\n        }\n        else setDisplayList([<BasicText key={v4()} text={`No request found for ${sortType[sort]}`}/>])\n    }\n    //grabServiceRequest(sort)\n\n    return(\n    <View style={{alignContent:\"center\", justifyContent:\"center\"}}>\n        <ScrollView>\n            <BasicText text={\"Room Service Request\"} textType={TextType.Title}/>\n            <PixelSpacer width={Dimensions.get(\"screen\").width*0.35} height={1}/>\n            <FilterButtons />\n            <BasicButton title={'Refresh'} onPress={()=>{grabServiceRequest(sort)}} />\n            <View style={{backgroundColor:GetColor(Color.SecondaryColor), padding:paddingRadius(), margin:margin(), borderRadius:borderRadius()}}>\n                {displayList}\n            </View>\n        </ScrollView>\n    </View>)\n}\n","import React, { useEffect, useState } from \"react\"\nimport { Dimensions, View } from \"react-native\"\nimport { Employee, WorkLog } from \"../../classes-interface/api-entities\"\nimport employeeAPIHandler, { EmployeeHandlerInterface } from \"../../classes-interface/employeehandler\"\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\"\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\"\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../../SafariSolaceStyleTools/styleconfig\"\nimport { GetDateFromNum } from \"../children/event-date-formatting\"\n\nexport default function ViewEmployeeStatus(){\n    //get employee statuses\n    //prepare render list worklogs\n    const handler: EmployeeHandlerInterface = new employeeAPIHandler(false)\n    const [worklogsState, setWorkLogs] = useState<WorkLog[]>([])\n    useEffect(()=>{GetWorkLogs()}, [])\n\n    async function GetWorkLogs(){\n        //const worklogs = await handler.getWorklogs()\n        //console.log(worklogs)\n        //setWorkLogs(worklogs)\n        const dummyWorklogs: WorkLog[] = [{wId: 123, type: 'CHECKOUT', timestamp: 1230}, {wId: 456, type: 'CHEKIN', timestamp: 9994063236}]\n        setWorkLogs(dummyWorklogs)\n    }\n\n    function LinkEmployee(worklogID: number){\n        const dummyEmployee: Employee[] = [{id: 123,isManager: false,fname: 'dude',lname: 'bro',username: 'yoyoyo',password: 'hmm'}]\n        const employee: Employee = dummyEmployee.find((employee)=>{return(employee.id === worklogID)}) //must have return in order to work\n        console.log(\"employee\", employee)\n        if(!employee) return \"no name found\" //in case no match is made\n        else return(employee.fname)\n    }\n\n    function PreparedWorkLogs(){\n        console.log('worklog state',worklogsState)\n        const loglist = worklogsState.map((worklog, key)=>{\n            return(\n                <View style={{backgroundColor:GetColor(Color.TertiaryColor), borderRadius:borderRadius(), margin:margin(), padding:paddingRadius()}}>\n                    <BasicText key={key} text={`NAME: ${LinkEmployee(worklog.wId)}\\nSTATUS: ${worklog.type}\\nTIMESTAMP: ${GetDateFromNum(worklog.timestamp)}`}/>\n                </View>)})\n        //console.log(loglist)\n        return (<View>{loglist}</View>)\n    }\n\n    return(<>  \n        <BasicText text={'Employee Clock Status'} textType={TextType.Title}/>\n        <View style={{backgroundColor:GetColor(Color.SecondaryColor), borderRadius:borderRadius()}}>\n            <PreparedWorkLogs/>\n        </View>\n    </>)\n}","import React, { useState } from 'react';\nimport { Dimensions, Platform, SafeAreaView } from 'react-native';\nimport { StyleSheet, View, Image } from 'react-native';\nimport { Employee } from './classes-interface/api-entities';\nimport { appContext, AppContextInterface } from './classes-interface/app-conext';\nimport NavBar from './Components/children/nav-bar';\nimport ClockingScreen from './Components/pages/clocking';\nimport EventsPage from './Components/pages/events-page';\nimport LoginPage from './Components/pages/login';\nimport ProblemView from './Components/pages/problem-view';\nimport RoomService from './Components/pages/room-service';\nimport ViewEmployeeStatus from './Components/pages/view-employee-status';\nimport BasicText from './SafariSolaceStyleTools/basictext';\nimport PixelSpacer from './SafariSolaceStyleTools/pixel-spacer';\nimport { Theme } from './SafariSolaceStyleTools/styleconfig';\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\n\nexport default function App() {\n\n  const [theme, setTheme] = useState(Theme.default);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [clockStatus, setClockStatus] = useState(false)\n  const dummyEmployee:Employee = {id: 0,isManager: false,fname: '',lname: '',username: '',password: ''}\n  const [user, setUser] = useState(dummyEmployee)\n\n  const initContext:AppContextInterface = {\n    clockStatus: clockStatus,\n    setClockStatus: setClockStatus,\n    user: user,\n    setUser: setUser\n  }\n  const themeContextObject:ThemeContextInterface = {theme:theme,setTheme:setTheme}\n\n  function SwitchPage(){\n    switch(pageIndex){\n\n      //================================================================================================\n      case    /*login*/           0:{return (<><LoginPage setPage={setPageIndex}/></>)}\n      case    /*room service*/    1:{return (<><NavBar setPageIndex={setPageIndex}/><RoomService/></>)}\n      case    /*event*/           2:{return (<><NavBar setPageIndex={setPageIndex}/><EventsPage/></>)}\n      case    /*check in*/        3:{return (<><NavBar setPageIndex={setPageIndex}/><ClockingScreen/></>)}\n      case    /*status check*/    4:{return (<><NavBar setPageIndex={setPageIndex}/><ViewEmployeeStatus/></>)}\n      case    /*problem*/         5:{return (<><NavBar setPageIndex={setPageIndex}/><ProblemView/></>)}\n      //================================================================================================\n      case    /*kris*/            6:{return (<><EventsPage/></>)}\n      case    /*john*/            7:{return (<><RoomService/></>)}\n      case    /*brandon*/         8:{return (<><BasicText text={'brandon'}/></>)}\n      case    /*josh*/            9:{return (<><BasicText text={'josh'}/></>)} \n      default                      :{return (<><BasicText text={'Testing'}/></>)}\n    }\n  }\n\n  const isWeb = Platform.OS == \"web\"\n  /** Logo scaling factor for platform */\n  function getLS(){\n    if(isWeb)return 3\n    else return 2\n  }\n\n  function WebMainSpacer(){\n    if(Platform.OS == \"web\") {return<PixelSpacer width={Dimensions.get(\"screen\").width*0.60} height={1}/> }\n    else{return <></>}\n  }\n  function MobileHeaderSpacer(){\n    if(Platform.OS == \"web\") return <></>\n    else{\n      switch(pageIndex){\n        case 0:{ return <></>}\n        case 1:{ return <PixelSpacer height={Dimensions.get(\"screen\").height*0.9} width={1}/> }\n        case 2:{ return <PixelSpacer height={Dimensions.get(\"screen\").height*1.5} width={1}/>}\n        case 3:{ return <></>}\n        case 4:{ return <></>}\n        case 5:{ return <PixelSpacer height={Dimensions.get(\"screen\").height*1} width={1}/>}\n\n      }\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <SafeAreaView >\n      <appContext.Provider value = {initContext}>\n        <themeContext.Provider value = { themeContextObject }>\n          <View style={{flexDirection:\"row\"}}>\n            <View style={{flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <WebMainSpacer/>\n                <MobileHeaderSpacer/>\n                <Image style={{height:64*getLS(),width:64*getLS(),margin:10}} source={ require('./assets/Sale.png') }/>\n                <SwitchPage/>\n            </View>\n          </View>\n        </themeContext.Provider>\n      </appContext.Provider>\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#444',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}