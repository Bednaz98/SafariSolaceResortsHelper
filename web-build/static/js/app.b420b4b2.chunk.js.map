{"version":3,"sources":["SafariSolaceStyleTools/colorstyle.ts","classes-interface/app-conext.tsx","SafariSolaceStyleTools/themecontext.tsx","SafariSolaceStyleTools/basicbutton.tsx","Components/pages/logoutButton.tsx","Components/children/nav-bar.tsx","SafariSolaceStyleTools/basictext.tsx","classes-interface/employeehandler.ts","Components/pages/clocking.tsx","classes-interface/eventhandler.ts","SafariSolaceStyleTools/basicinputtext.tsx","SafariSolaceStyleTools/basicmodal.tsx","Components/children/create-event-option.tsx","Components/children/update-allEvents-state.tsx","Components/children/event-date-formatting.tsx","Components/children/format-single-event.tsx","Components/children/get-event-by-ID.tsx","Components/pages/events-page.tsx","SafariSolaceStyleTools/pixel-spacer.tsx","Components/pages/login.tsx","classes-interface/problemhandler.ts","Components/children/problem-item.tsx","Components/pages/problem-view.tsx","classes-interface/room-service-handler.ts","Components/children/room-service-request.tsx","Components/pages/room-service.tsx","Components/pages/view-employee-status.tsx","App.tsx"],"names":["Theme","Color","initContext","clockStatus","setClockStatus","user","undefined","setUser","appContext","createContext","themeContext","theme","setTheme","GetColor","colorType","returnColor","useContext","light","Text","textHeader","textTitle","Button","InputText","ModalBackground","ModalInner","primaryColor","SecondaryColor","TertiaryColor","dark","hacker","Platform","OS","BasicButton","props","onPress","title","View","style","padding","color","disabled","testID","key","LogoutButton","AsyncStorage","removeItem","setPage","NavBar","context","flexDirection","setPageIndex","console","log","isManager","TextType","employeeAPIHandler","dev","IndexURL","useURL","devMode","this","a","async","axios","get","getURL","response","data","id","filter","w","wId","type","post","username","password","patch","BasicText","text","Error","textType","General","getTextStyle","Title","fontSize","Header","ClockingScreen","useState","clockCheck","setClockCheck","handler","useEffect","getWorklogByID","clockin","clockout","EventAPIHandler","put","status","event","BasicInputText","value","onChangeText","placeholder","keyboardType","editable","onChange","nativeEvent","eventCount","target","onContentSizeChange","contentSize","width","height","backgroundColor","TextInput","BasicModal","child","openTitle","show","setShow","styles","StyleSheet","create","modalView","margin","Modal","borderRadius","alignItems","shadowColor","shadowOffset","animationType","transparent","visible","onRequestClose","flex","justifyContent","marginTop","CreateEventOption","setTitle","desc","setDesc","Date","date","setDate","showDateAndTime","setShowDateAndTime","showDatePicker","setShowDatePicker","showStartTimePicker","setShowStartTimePicker","showEndTimePicker","setShowEndTimePicker","getHours","setHours","startTime","setStart","endTime","setEnd","startAntePost","endAntePost","location","setLocation","RenderStartTime","mode","is24Hour","display","selectedTime","toLocaleTimeString","RenderEndTime","RenderDate","selectedDate","DateAndTime","inputFieldsProps","createEventStates","allEvents","setAllEvents","toDateString","slice","newEvent","push","UpdateAllEventsState","FormattedTime","time","toLocaleString","hours","AMorPM","GetDateFromNum","num","toUTCString","FormatSingleEvent","startTimeToDate","endTimeToDate","startTimeFormatted","endTimeFormatted","index","newEventList","map","CancelEvent","GetEventByID","eventID","setEventID","setFilteredEventID","EventsPage","eventhandle","filteredEventID","getAllEvents","events","setAll","formattedEvents","ScrollView","PixelSpacer","minHeight","minWidth","maxHeight","maxWidth","LoginPage","userName","setUserName","setPassword","alert","t","employee","login","emp","ProblemAPIHandler","ProblemItem","submittedTime","photoLink","setReviewed","markReviewed","window","href","ProblemView","problemList","setProblemList","getAllProblems","pendingProblems","p","setter","problemItems","sortType","RoomServiceHandlerAPIHandler","All","newData","i","length","RoomServiceRequest","initServiceRequest","serviceRequest","SwitchButtonDisplay","SwitchStatusDisplay","GetOfferingString","tempString","requestedOffering","error","dateDisplay","created","room","RoomService","setData","sort","setSort","grabServiceRequest","getAllRequest","foundRequest","Ordered","Processing","Completed","Cancelled","FlatList","keyExtractor","item","v4","renderItem","ViewEmployeeStatus","worklogsState","setWorkLogs","LinkEmployee","worklogID","fname","lname","find","timestamp","loglist","worklog","App","default","pageIndex","themeContextObject","container","Provider","SafeAreaView"],"mappings":"4HAOYA,EAOAC,E,6CCACC,EAAmC,CAC5CC,aAAa,EACbC,eAAgB,aAChBC,UAAMC,EACNC,QAAS,cAGAC,EAAaC,wBAAcP,G,gBCP3BQ,EAAeD,wBAH4B,CAACE,MAAM,EAAEC,SAAS,eFgB3D,SAASC,EAASC,GAC7B,IACIC,EAAc,UAElB,OAHgBC,qBAAWN,GAGZC,OACX,KAAKX,EAAMiB,MACP,OAAOH,GACH,KAAKb,EAAMiB,KACX,KAAKjB,EAAMkB,WACX,KAAKlB,EAAMmB,UAAaL,EAAc,QAAU,MAChD,KAAKd,EAAMoB,OAAUN,EAAc,YAAc,MACjD,KAAKd,EAAMqB,UAAaP,EAAa,QAAS,MAC9C,KAAKd,EAAMsB,gBAAmBR,EAAc,UAC5C,KAAKd,EAAMuB,WAAcT,EAAc,UACvC,KAAKd,EAAMwB,aAAgBV,EAAc,UAAY,MACrD,KAAKd,EAAMyB,eAAkBX,EAAc,UAAY,MACvD,KAAKd,EAAM0B,cAAiBZ,EAAc,UAAY,MACtD,QAAgBA,EAAc,UAGtC,KAAKf,EAAM4B,KACP,OAAOd,GACH,KAAKb,EAAMiB,KACX,KAAKjB,EAAMkB,WACX,KAAKlB,EAAMmB,UAAaL,EAAc,QAAU,MAChD,KAAKd,EAAMoB,OAAUN,EAAc,YAAc,MACjD,KAAKd,EAAMqB,UAAaP,EAAa,QAAS,MAC9C,KAAKd,EAAMsB,gBAAmBR,EAAc,UAC5C,KAAKd,EAAMuB,WAAcT,EAAc,UACvC,KAAKd,EAAMwB,aAAgBV,EAAc,UAAY,MACrD,KAAKd,EAAMyB,eAAkBX,EAAc,UAAY,MACvD,KAAKd,EAAM0B,cAAiBZ,EAAc,UAAY,MACtD,QAAgBA,EAAc,UAGtC,KAAKf,EAAM6B,OACP,OAAOf,GACH,KAAKb,EAAMiB,KACX,KAAKjB,EAAMkB,WACX,KAAKlB,EAAMmB,UAAaL,EAAc,QAAU,MAChD,KAAKd,EAAMoB,OAAUN,EAAc,YAAc,MACjD,KAAKd,EAAMqB,UAAaP,EAAa,QAAS,MAC9C,KAAKd,EAAMsB,gBAAmBR,EAAc,UAC5C,KAAKd,EAAMuB,WAAcT,EAAc,UACvC,KAAKd,EAAMwB,aAAgBV,EAAc,UAAY,MACrD,KAAKd,EAAMyB,eAAkBX,EAAc,UAAY,MACvD,KAAKd,EAAM0B,cAAiBZ,EAAc,UAAY,MACtD,QAAgBA,EAAc,UAGtC,QACI,OAAOD,GACH,KAAKb,EAAMiB,KACX,KAAKjB,EAAMkB,WACX,KAAKlB,EAAMmB,UAAaL,EAAc,QAAU,MAChD,KAAKd,EAAMoB,OAAUN,EAAc,YAAc,MACjD,KAAKd,EAAMqB,UAAaP,EAAa,QAAS,MAC9C,KAAKd,EAAMsB,gBAAmBR,EAAc,UAC5C,KAAKd,EAAMuB,WAAcT,EAAc,UACvC,KAAKd,EAAMwB,aAAgBV,EAAc,UAAY,MACrD,KAAKd,EAAMyB,eAAkBX,EAAc,UAAY,MACvD,KAAKd,EAAM0B,cAAiBZ,EAAc,UAAY,MACtD,QAAgBA,EAAc,WAI1C,MAAkB,WAAfe,IAASC,GAAwB,GAAIhB,EAC5BA,G,SAvFJf,O,qBAAAA,I,iBAAAA,I,eAAAA,I,oBAAAA,M,cAOAC,O,eAAAA,I,2BAAAA,I,yBAAAA,I,mBAAAA,I,qCAAAA,I,2BAAAA,I,yBAAAA,I,+BAAAA,I,mCAAAA,I,kCAAAA,M,gBGRG,SAAS+B,EAAYC,GACPA,EAAlBC,QAAkBD,EAATE,MAEhB,OACA,cAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAQ,GAAtB,SACI,cAACjB,EAAA,EAAD,CAAQa,QAASD,EAAMC,QAASC,MAAQF,EAAME,MAAOI,MAAO1B,EAASZ,EAAMoB,QAG3EmB,SAAaP,EAAMO,SAA2BC,OAAQR,EAAMQ,QAAzBR,EAAMS,O,YCRjC,SAASC,EAAaV,GAClC,OACI,cAACG,EAAA,EAAD,UACI,cAACJ,EAAD,CAAaG,MAAO,SAAUD,QAAS,WACnCU,IAAaC,WAAW,QACxBZ,EAAMa,QAAQ,QCDf,SAASC,EAAOd,GAC3B,IAAMe,EAAUhC,qBAAWR,GAa3B,OACA,eAAC4B,EAAA,EAAD,CAAMC,MAAO,CAACY,cAAc,OAA5B,UACI,cAACjB,EAAD,CAAaG,MAAO,eAAgBD,QAAU,WAAKD,EAAMiB,aAAa,MACtE,cAAClB,EAAD,CAAaG,MAAO,gBAAiBD,QAAU,WAAKD,EAAMiB,aAAa,MACvE,cAAClB,EAAD,CAAaG,MAAO,aAAcD,QAAU,WAAKD,EAAMiB,aAAa,MACpE,eAhBJ,SAAwBjB,GAEpB,OADAkB,QAAQC,IAAIJ,EAAQ3C,KAAKgD,WACtBL,EAAQ3C,KAAKgD,UAEZ,qCACI,cAACrB,EAAD,CAAaG,MAAO,uBAAwBD,QAAU,WAAKD,EAAMiB,aAAa,MAC9E,cAAClB,EAAD,CAAaG,MAAO,kBAAmBD,QAAU,WAAKD,EAAMiB,aAAa,SAErE,+BAQZ,CAAiBA,aAAcjB,EAAMiB,eACrC,cAACP,EAAD,CAAcG,QAASb,EAAMiB,kB,ICTzBI,E,kECASC,E,WAOjB,aAA6C,IAAjCC,EAAgC,wDAAXC,EAAW,uDAAF,EAAE,iBALpCC,OAAgB,4BAKoB,KAJpCC,SAAkB,EAIkB,KAHpCF,SAAU,EAIdG,KAAKD,QAAQH,EACbI,KAAKH,SAASA,E,kCAMlB,WACI,OAAIG,KAAKD,QACG,6DADcC,KAAKF,S,yBAInC,4BAAAG,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,cADnD,cACUC,EADV,OAEUC,EAAiBD,EAASC,KAFpC,kBAGWA,GAHX,8D,4BAMA,SAAqBC,GAArB,mBAAAP,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,cADnD,cACUC,EADV,OAEUG,EAASH,EAASC,KAAKE,QAAO,SAAAC,GAAC,OAAIA,EAAEF,KAAOA,KAC5CD,EAAeE,EAAO,GAHhC,kBAIWF,GAJX,8D,qBAOA,SAAcI,EAAaC,GAA3B,iBAAAX,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMU,KAAKb,KAAKK,SAAS,YAAY,CACxDM,IAAIA,EACJC,KAAKA,KAHb,cACUN,EADV,OAKUC,EAAeD,EAASC,KALlC,kBAMWA,GANX,8D,sBASA,SAAeI,EAAaC,GAA5B,iBAAAX,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMU,KAAKb,KAAKK,SAAS,YAAY,CACxDM,IAAIA,EACJC,KAAKA,KAHb,cACUN,EADV,OAKUC,EAAeD,EAASC,KALlC,kBAMWA,GANX,8D,mBASA,SAAYO,EAAiBC,GAA7B,iBAAAd,EAAAC,OAAA,2EAAAD,EAAA,MAE+BE,IAAMa,MAAMhB,KAAKK,SAAS,SAAS,CACtDS,SAASA,EACTC,SAASA,KAJrB,cAEcT,EAFd,OAMcC,EAAgBD,EAASC,KANvC,kBAOeA,GAPf,gCASQhB,QAAQC,IAAI,gBATpB,oE,aDhEW,SAASyB,EAAU5C,GAAO,IAAD,EAC7B6C,EAAQ7C,EAAR6C,KACP,IAAIA,EAAM,MAAM,IAAIC,MAAM,uDAG1B,IAAMC,EAAiB,eAAG/C,OAAH,EAAGA,EAAOuC,MAAV,EAAkBlB,EAAS2B,QAClD,OACA,cAAC7C,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAQ,GAAtB,SACI,cAACpB,EAAA,EAAD,CAAMmB,MAAO6C,EAAaF,GAA1B,SAAsCF,MAU9C,SAASI,EAAaF,GAClB,OAAOA,GACP,KAAK1B,EAAS6B,MAAW,MAAO,CAAC5C,MAAM1B,EAASZ,EAAMiB,MAAOkE,SAAS,IACtE,KAAK9B,EAAS+B,OAAW,MAAO,CAAC9C,MAAM1B,EAASZ,EAAMiB,MAAOkE,SAAS,IAEtE,KAAK9B,EAAS2B,QACd,QAAyB,MAAO,CAAC1C,MAAM1B,EAASZ,EAAMiB,MAAOkE,SAAS,KEtB3D,SAASE,IACpB,IAAMtC,EAAUhC,qBAAWR,GAE3B,EAAoC+E,oBAAS,GAA7C,WAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAU,IAAInC,EAsBpB,OArBAoC,qBAAU,WAEN,OAEJ,EAAA9B,EAAAC,OAAA,kEAAAD,EAAA,MAC0B6B,EAAQE,eAAe5C,EAAQ3C,KAAK+D,KAD9D,OAEuB,UAFvB,OAEeI,KAAmBiB,GAAc,GACvCA,GAAc,GAHvB,4DAFW,eAAW,IAoBlB,eAACrD,EAAA,EAAD,WACI,cAACyC,EAAD,CAAWC,KAZZU,EAAmB,YACV,aAYR,cAACxD,EAAD,CAAaG,MAAO,gBAAiBD,QAT7C,oBAAA2B,EAAAC,OAAA,mDACI2B,GAAeD,GACXA,EAFR,kCAAA3B,EAAA,MAE0B6B,EAAQG,QAAQ7C,EAAQ3C,KAAK+D,GAAG,aAF1D,+CAAAP,EAAA,MAGe6B,EAAQI,SAAS9C,EAAQ3C,KAAK+D,GAAG,aAHhD,mE,SFTQd,O,iBAAAA,I,mBAAAA,I,sBAAAA,M,umBGASyC,E,WAQjB,aAA6C,IAAjCvC,EAAgC,wDAAXC,EAAW,uDAAF,EAAE,iBANpCC,OAAgB,4BAMoB,KALpCC,SAAkB,EAKkB,KAJpCF,SAAW,EAKfG,KAAKD,QAAQH,EACbI,KAAKH,SAASA,E,kCAOlB,WACI,OAAIG,KAAKD,QACG,6DADcC,KAAKF,S,0BAInC,4BAAAG,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,YADnD,cACUC,EADV,OAEUC,EAAeD,EAASC,KAFlC,kBAGWA,GAHX,8D,yBAMA,SAAkBC,GAAlB,iBAAAP,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMiC,IAAIpC,KAAKK,SAAS,UAC/C,CACIG,GAAGA,EACH6B,OAAO,eAJf,cACU/B,EADV,OAMUC,EAAaD,EAASC,KANhC,kBAOWA,GAPX,8D,yBAUA,SAAkB+B,GAAlB,iBAAArC,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMU,KAAKb,KAAKK,SAAS,UAAUiC,IAD9D,cACUhC,EADV,OAEUC,EAAaD,EAASC,KAFhC,kBAGWA,GAHX,8D,0BAMA,SAAmBC,GAAnB,iBAAAP,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,WAAWG,IAD9D,cACUF,EADV,OAEUC,EAAaD,EAASC,KAFhC,kBAGWA,GAHX,8D,yBAMA,SAAkBC,EAAW8B,GAA7B,iBAAArC,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMiC,IAAIpC,KAAKK,SAAS,UAAxB,GAEnBG,GAAGA,GACA8B,KAJX,cACUhC,EADV,OAMUC,EAAaD,EAASC,KANhC,kBAOWA,GAPX,gE,aClEW,SAASgC,EAAelE,GAAO,IAAD,QAClCmE,EAAoCnE,EAApCmE,MAAOC,EAA6BpE,EAA7BoE,aAAcC,EAAerE,EAAfqE,YAC5B,QAAahG,IAAV8F,EAAqB,MAAM,IAAIrB,MAAM,gGACxC,IAAIsB,EAAc,MAAM,IAAItB,MAAM,gGAClC,IAAIuB,EAAa,MAAM,IAAIvB,MAAM,wIACjC,IAAMwB,EAAY,eAAGtE,OAAH,EAAGA,EAAOsE,cAAV,EAA0B,UACtCC,EAAQ,eAAGvE,OAAH,EAAGA,EAAOuE,WAAV,EACRC,EAAQ,eAAGxE,OAAH,EAAGA,EAAOwE,UAAV,EAAwB,YAAmD,IAAD,IAA/CC,YAA+C,EAAhCC,WAAgC,EAApBC,OAAoB,EAAZ9B,MACtE+B,EAAmB,eAAG5E,OAAH,EAAGA,EAAO4E,qBAAV,EAAmC,YAA0D,IAAD,IAAtDH,YAAeI,YAAuC,EAAxBC,MAAwB,EAAjBC,QAEpG,OACA,cAAC5E,EAAA,EAAD,CAAMC,MAAO,CAAC4E,gBAAgBpG,EAASZ,EAAMqB,WAAYgB,QAAQ,GAAjE,SACI,cAAC4E,EAAA,EAAD,CAAWd,MAAOA,EAAOC,aAAcA,EAAcC,YAAaA,EACtEC,aAAcA,EAAcC,SAAUA,EAAUC,SAAUA,EAAUI,oBAAqBA,M,YCV9E,SAASM,EAAWlF,GAAO,IAAD,EACnCmF,EAAQnF,EAAMmF,MACZC,EAAS,eAAGpF,OAAH,EAAGA,EAAOoF,WAAV,EAAuB,kBAGtC,EAAwB9B,oBAAS,GAAjC,WAAO+B,EAAP,KAAaC,EAAb,KACMC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACT1E,cAAc,SACd2E,OAAQ,GACRX,gBAAgBpG,EAASZ,EAAM4H,OAC/BC,aAAc,GACdxF,QAAS,GACTyF,WAAY,SACZC,YAAa,OACbC,aAAc,CACZlB,MAAO,EACPC,OAAQ,MAKZ,OACE,eAAC5E,EAAA,EAAD,WACE,cAACyF,EAAA,EAAD,CACEK,cAAc,QACdC,aAAa,EACbC,QAASd,EACTe,eAAgB,WAAOd,GAASD,IAJlC,SAKE,cAAClF,EAAA,EAAD,CAAMC,MAAQ,CAACiG,KAAM,EAAGC,eAAgB,SAAUR,WAAY,SAAUS,UAAW,GAAIvB,gBAAgBpG,EAASZ,EAAM4H,QAAtH,SACE,eAACzF,EAAA,EAAD,CAAMC,MAAOmF,EAAOG,UAApB,UAEE,cAACvF,EAAA,EAAD,UACGgF,IAEH,cAAChF,EAAA,EAAD,UACE,cAACJ,EAAD,CAAaG,MAAO,QAASD,QAAS,WAAKqF,GAASD,eAO5D,cAACtF,EAAD,CAAaG,MAAOkF,EAAWnF,QAAS,WAAKqF,GAAQ,S,iCCzC9C,SAASkB,EAAkBxG,GAEtC,MAA0BsD,mBAAiB,IAA3C,WAAOpD,EAAP,KAAcuG,EAAd,KACA,EAAwBnD,mBAAiB,IAAzC,WAAOoD,EAAP,KAAaC,EAAb,KACA,EAAwBrD,mBAAS,IAAIsD,MAArC,WAAOC,EAAP,KAAaC,EAAb,KAEA,EAA8CxD,oBAAS,GAAvD,WAAOyD,EAAP,KAAwBC,EAAxB,KACA,EAA2C1D,oBAAS,GAApD,WAAO2D,EAAP,KAAuBC,EAAvB,KACA,EAAqD5D,oBAAS,GAA9D,WAAO6D,EAAP,KAA4BC,EAA5B,KACA,EAAkD9D,oBAAS,GAA3D,WAAO+D,EAAP,KAA0BC,EAA1B,KACA,EAA8BhE,oBAAS,WAAK,IAAIuD,EAAO,IAAID,KAAQ,OAAIC,EAAKU,WAAa,IAAKV,EAAKW,SAASX,EAAKU,WAAW,IAAYV,GAAkBA,KAA1J,WAAOY,EAAP,KAAkBC,EAAlB,KACA,EAA0BpE,oBAAS,WAAK,IAAIuD,EAAO,IAAID,KAAQ,OAAIC,EAAKU,WAAa,IAAKV,EAAKW,SAASX,EAAKU,WAAW,IAAYV,GAAkBA,KAAtJ,WAAOc,EAAP,KAAgBC,EAAhB,KACA,EAA0CtE,mBAAS,MAAnD,WAAOuE,EAAP,KACA,GADA,KACsCvE,mBAAS,OAA/C,WAAOwE,EAAP,KACA,GADA,KACgCxE,mBAAiB,KAAjD,WAAOyE,GAAP,KAAiBC,GAAjB,KAqCA,SAASC,KACL,OACI,cAAC,IAAD,CACAzH,OAAO,iBACP2D,MAAOsD,EACPS,KAAM,OACNC,UAAU,EACVC,QAAQ,QACR5D,SAAU,SAACP,EAAOoE,GAAsBnH,QAAQC,IAAI,kBAAmBkH,EAAaC,sBAAuBlB,GAAuB,GAAQM,EAASW,GAAgBZ,MAI3K,SAASc,KACL,OACI,cAAC,IAAD,CACA/H,OAAO,iBACP2D,MAAOwD,EACPO,KAAM,OACNC,UAAU,EACVC,QAAQ,QACR5D,SAAU,SAACP,EAAOoE,GAAsBnH,QAAQC,IAAI,gBAAgBkH,EAAaC,sBAAuBhB,GAAqB,GAAQM,EAAOS,GAAgBV,MAIpK,SAASa,KACL,OAAO,cAAC,IAAD,CACHhI,OAAO,iBACP2D,MAAO0C,EACPqB,KAAM,OACNC,UAAU,EACVC,QAAQ,UACR5D,SAAU,SAACP,EAAOwE,GAAgBvH,QAAQC,IAAI,kBAAmB+F,GAAkB,GAAQJ,EAAQ2B,GAAgB5B,MAI3H,SAAS6B,KACL,OAAI3B,EACGE,EACS,cAACuB,GAAD,IAEJrB,EAEA,cAACc,GAAD,IAGCZ,EACI,cAACkB,GAAD,IACA,6BAEJ,6BAGjB,IAGqBI,GAHfC,GAAoB,CAAC1I,MAAOA,EAAOwG,KAAMA,EAAMe,UAAWA,EAAWE,QAASA,EAASI,SAAUA,GAAUc,UAAW7I,EAAM6I,UAAWC,aAAc9I,EAAM8I,aAAcjB,cAAeA,EAAeC,YAAaA,GAqB1N,OACI,cAAC5C,EAAD,CAAYC,OAnBKwD,GAmBcC,GAjB3B,qCACI,cAAC1E,EAAD,CAAgBC,MAAOjE,EAAOkE,aAAcqC,EAAUpC,YAAa,UACnE,cAACH,EAAD,CAAgBC,MAAOuC,EAAMtC,aAAcuC,EAAStC,YAAa,gBACjE,cAACH,EAAD,CAAgBC,MAAO4D,GAAU3D,aAAc4D,GAAa3D,YAAa,aACzE,cAACtE,EAAD,CAAaE,QAAS,WAAKiH,GAAkB,GAAOE,GAAuB,GAAOE,GAAqB,GAAON,GAAmB,IAAY9G,MAAO,sBACpJ,cAACwI,GAAD,IACA,cAAC9F,EAAD,CAAWC,KAAI,eAAiBgE,EAAKkC,iBACrC,cAACnG,EAAD,CAAWC,KAAI,eAAiB4E,EAAUa,qBAAqBU,MAAM,GAAG,KACxE,cAACpG,EAAD,CAAWC,KAAI,aAAe8E,EAAQW,qBAAqBU,MAAM,GAAG,GAArD,SAGf,cAACjJ,EAAD,CAAaE,QAAS,kBC/HvB,SAA8BD,GACzC,IAAMiJ,EAAmB,CACrB9G,GAAG,SACHjC,MAAMF,EAAME,MACZwG,KAAK1G,EAAM0G,KACXe,UAAUzH,EAAMyH,UAChBE,QAAQ3H,EAAM2H,QACdI,SAAS/H,EAAM+H,SACf/D,OAAO,eAGXhE,EAAM6I,UAAUK,KAAKD,GACrB/H,QAAQC,IAAI,+FAAsFnB,EAAM6I,WAExG7I,EAAM8I,aAAN,IAAuB9I,EAAM6I,YDiHSM,CAAqBR,KAAmBzI,MAAO,0BAM9BkF,UAAW,iBEvIvD,SAASgE,EAAcC,GAClCA,EAAKC,iBACL,IAAMC,EAAQF,EAAK9B,WACfiC,EAAS,GAOb,OANID,EAAQ,GAAKA,EAAQ,KACrBF,EAAK7B,SAAS6B,EAAK9B,WAAY,IAEnBiC,EAAZD,EAAQ,GAAa,KACX,KACQF,EAAKf,qBAAqBU,MAAM,GAAG,GACzD,IAA2BQ,EAGxB,SAASC,EAAeC,GAC3B,IAAM7C,EAAO,IAAID,KAAW,IAAN8C,GAAYC,cAElC,OADAzI,QAAQC,IAAI0F,GACLA,ECVI,SAAS+C,EAAkB5J,GACtC,MAA0DA,EAAMiE,MAAzD9B,EAAP,EAAOA,GAAGjC,EAAV,EAAUA,MAAMwG,EAAhB,EAAgBA,KAAKe,EAArB,EAAqBA,UAAUE,EAA/B,EAA+BA,QAAQI,EAAvC,EAAuCA,SAAS/D,EAAhD,EAAgDA,OAE1C6F,EAAkB,IAAIjD,KAAKa,GAC3BqC,EAAgB,IAAIlD,KAAKe,GACzBoC,EAAqBX,EAAcS,GACnCG,EAAmBZ,EAAcU,GAUvC,OAAQ,mCACH9J,EAAMoC,SAAWD,GAAOnC,EAAMoC,OAe/B,KAdA,qCACI,cAACQ,EAAD,CAAWC,KAAI,eAAgB7C,EAAMiK,MAAQ,KAC7C,cAACrH,EAAD,CAAWC,KAAI,OAASV,IACxB,cAACS,EAAD,CAAWC,KAAI,UAAY3C,IAC3B,cAAC0C,EAAD,CAAWC,KAAI,gBAAkB6D,IACjC,cAAC9D,EAAD,CAAWC,KAAI,eAAiBkH,IAChC,cAACnH,EAAD,CAAWC,KAAI,aAAemH,IAC9B,cAACpH,EAAD,CAAWC,KAAI,aAAekF,IAC9B,cAACnF,EAAD,CAAWC,KAAI,WAAamB,IAC5B,cAACjE,EAAD,CAAaG,MAAO,eAAgBD,QAAS,kBAnBrD,SAAqBkC,GACjB,IAAM+H,EAAelK,EAAM6I,UAAUsB,KAAI,SAAAlG,GACrC,OAAGA,EAAM9B,KAAOA,GAAK8B,EAAMD,OAAS,YAAoBC,GAC5CA,KAEhBjE,EAAM8I,aAAN,IAAuBoB,IAc8BE,CAAYpK,EAAMiE,MAAM9B,YC1BtE,SAASkI,EAAarK,GACjC,MAA8BsD,mBAAiB,IAA/C,WAAOgH,EAAP,KAAgBC,EAAhB,KAEA,OADA7G,qBAAU,WAAK1D,EAAMwK,mBAAmBF,KAAW,CAACA,IAEhD,mCAEI,cAACpG,EAAD,CAAgBC,MAAOmG,EAASlG,aAAcmG,EAAYlG,YAAa,eCJpE,SAASoG,KACpB,IAAMC,EAAqC,IAAI5G,GAAgB,GAoB/D,EAAkCR,mBAnBL,IAmB7B,WAAOuF,EAAP,KAAkBC,EAAlB,KACA,EAA8CxF,mBAAiB,IAA/D,WAAOqH,EAAP,KAAwBH,EAAxB,KAsBA,OApBA9G,qBAAU,YAIV,mBAAA9B,EAAAC,OAAA,kEAAAD,EAAA,MACyB8I,EAAYE,gBADrC,OACUC,EADV,OAEI/B,EAAa+B,GAFjB,4DAHIC,MAoBA,qCACI,cAACT,EAAD,CAAcG,mBAAoBA,IAClC,cAAChE,EAAD,CAAmBqC,UAAWA,EAAWC,aAAcA,IACvD,eAdR,WACI,IAAMiC,EAAkBlC,EAAUsB,KAAI,SAAClG,EAAOgG,GAAW,OAAO,cAACL,EAAD,CAAmB3F,MAAOA,EAAOgG,MAAOA,EAAOpB,UAAWA,EAAWC,aAAcA,EAAc1G,OAAQuI,OACzK,OACI,cAACxK,EAAA,EAAD,UACI,cAAC6K,EAAA,EAAD,UACCD,QASL,OCpDG,SAASE,GAAYjL,GAAO,IAAD,IAChC+E,EAAM,eAAG/E,OAAH,EAAGA,EAAO+E,QAAV,EAAoB,EAC1BD,EAAK,eAAG9E,OAAH,EAAGA,EAAO8E,OAAV,EAAmB,EACvBoG,EAAyClL,EAAzCkL,UAAUC,EAA+BnL,EAA/BmL,SAASC,EAAsBpL,EAAtBoL,UAAUC,EAAYrL,EAAZqL,SAGpC,OAAO,cAAClL,EAAA,EAAD,CAAMC,MAAO,CAAC2E,OAAOA,EAAQD,MAAMA,EAAOoG,YAAWC,WAAUC,YAAWC,cCCtE,SAASC,GAAUtL,GAChC,IAAMe,EAA+BhC,qBAAWR,GAChD,EAAgC+E,mBAAS,IAAzC,WAAOiI,EAAP,KAAiBC,EAAjB,KACA,EAAgClI,mBAAS,IAAzC,WAAOZ,EAAP,KAAiB+I,EAAjB,KAcA,SAAS5K,IACPb,EAAMa,QAAQ,GACd6K,MAAM,yBAIR,OACE,eAACvL,EAAA,EAAD,WACE,cAACyC,EAAD,CACEC,KAAM,mCACNE,SAAU1B,EAAS6B,QAErB,cAAC+H,GAAD,CAAalG,OAAQ,IACrB,cAACb,EAAD,CACEC,MAAOoH,EACPnH,aAAc,SAAAuH,GAAC,OAAIH,EAAYG,IAC/BtH,YAAa,aAEf,cAAC4G,GAAD,CAAalG,OAAQ,IACrB,cAACb,EAAD,CACEC,MAAOzB,EACP0B,aAAc,SAAAuH,GAAC,OAAIF,EAAYE,IAC/BtH,YAAa,aAEf,cAAC4G,GAAD,CAAalG,OAAQ,IACrB,cAAChF,EAAD,CAAaG,MAAO,QAASD,QArCjC,8BAAA2B,EAAAC,OAAA,uDACQ+J,EAAW,IAAItK,GAAmB,GAD1C,WAAAM,EAAA,MAGyBgK,EAASC,MAAMN,EAAU7I,IAHlD,OAGQT,EAHR,OAIQ6J,EAAM7J,EACZf,QAAQC,IAAI2K,GACTA,EAAIpJ,WAAaA,GAAYoJ,EAAIrJ,WAAa8I,IAC/CxK,EAAQzC,QAAQwN,GAChBjL,KARJ,kE,ICJmBkL,G,WAMjB,aAA6C,IAAjCxK,EAAgC,wDAAXC,EAAW,uDAAF,EAAE,iBAJpCC,OAAgB,4BAIoB,KAHpCC,SAAkB,EAGkB,KAFpCF,SAAU,EAGdG,KAAKD,QAAQH,EACbI,KAAKH,SAASA,E,kCAMlB,WACI,OAAIG,KAAKD,QACG,6DADcC,KAAKF,S,4BAInC,4BAAAG,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,cADnD,cACUC,EADV,OAEUC,EAAiBD,EAASC,KAFpC,kBAGWA,GAHX,8D,4BAMA,SAAqBC,GAArB,iBAAAP,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,aAAaG,IADhE,cACUF,EADV,OAEUC,EAAeD,EAASC,KAFlC,kBAGWA,GAHX,8D,0BAMA,SAAmBC,EAAW6B,GAA9B,iBAAApC,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMiC,IAAIpC,KAAKK,SAAS,aAAaG,EAC5D,CACIA,GAAGA,EACH6B,OAAOA,KAJf,cACU/B,EADV,OAMUC,EAAeD,EAASC,KANlC,kBAOWA,GAPX,gE,KCtCW,SAAS8J,GAAYhM,GAEhC,IAAOmC,EAA8CnC,EAA9CmC,GAAIuE,EAA0C1G,EAA1C0G,KAAMuF,EAAoCjM,EAApCiM,cAAejI,EAAqBhE,EAArBgE,OAAQkI,EAAalM,EAAbkM,UAElCzI,EAAmC,IAAIsI,GAE7C,SAASI,IACL1I,EAAQ2I,aAAajK,EAAI,YAa7B,OAAO,mCACH,cAAC+C,EAAD,CAAYC,MAVL,qCACH,cAACvC,EAAD,CAAWC,KAAI,gBAAkB6D,IACjC,cAAC9D,EAAD,CAAWC,KAAI,mBAAqBoJ,IACpC,cAACrJ,EAAD,CAAWC,KAAI,WAAamB,IAC3BkI,EAAY,cAACnM,EAAD,CAAaE,QAAS,WAAKoM,OAAOtE,SAASuE,KAAKJ,GAAYhM,MAAO,mBAAsB,cAAC0C,EAAD,CAAWC,KAAM,yBACvH,cAAC9C,EAAD,CAAaE,QAASkM,EAAajM,MAAO,wBAKbkF,UAAWsB,M,+NCpBrC,SAAS6F,KAcpB,MAAsCjJ,mBAAS,IAA/C,WAAOkJ,EAAP,KAAoBC,EAApB,KAEMhJ,EAAmC,IAAIsI,IAAkB,GAE/DrI,qBAAU,YAEV,qBAAA9B,EAAAC,OAAA,kEAAAD,EAAA,MACsC6B,EAAQiJ,kBAD9C,OACUzK,EADV,OAEU0K,EAA6B1K,EAASG,QAAO,SAAAwK,GAAC,MAAiB,eAAbA,EAAE5I,UAC1DyI,EAAeE,GAHnB,4DAFeE,KAAU,IAQzB,IAAMC,EAAeN,EAAYrC,KAAI,SAAAyC,GAAC,OAAI,cAACZ,G,mWAAD,IAA4BY,GAAVA,EAAEzK,OAE9D,OAAO,eAAChC,EAAA,EAAD,WACH,cAACyC,EAAD,CAAWC,KAAM,qBAEjB,cAACmI,EAAA,EAAD,UACK8B,O,ICjCDC,G,4BAAAA,O,qBAAAA,I,2BAAAA,I,yBAAAA,I,yBAAAA,I,cAAAA,Q,SAeSC,G,WAMjB,aAA6C,IAAjCzL,EAAgC,wDAAXC,EAAW,uDAAF,EAAE,iBAJpCC,OAAgB,4BAIoB,KAHpCC,SAAkB,EAGkB,KAFpCF,SAAU,EAGdG,KAAKD,QAAQH,EACbI,KAAKH,SAASA,E,kCAMlB,WACI,OAAIG,KAAKD,QACG,6DADcC,KAAKF,S,2BAKnC,SAAoBc,GAApB,qBAAAX,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMC,IAAIJ,KAAKK,SAAS,qBADnD,UACUC,EADV,OAEUC,EAAwBD,EAASC,KACpCK,GAAQwK,GAASE,IAHxB,yCAIe/K,GAJf,OAOQ,IADIgL,EAA2B,GACvBC,EAAE,EAAGA,EAAEjL,EAAKkL,OAAQD,IACrBjL,EAAKiL,GAAGnJ,QAAU+I,GAASxK,IAC1B2K,EAAQhE,KAAKhH,EAAKiL,IATlC,yBAYeD,GAZf,+D,6BAgBA,SAAsB/K,GAAtB,iBAAAP,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMiC,IAAIpC,KAAKK,SAAS,oBAAoBG,EAAI,CACnE6B,OAAQ,gBAFhB,cACU/B,EADV,OAIUC,EAAsBD,EAASC,KAJzC,kBAKWA,GALX,8D,6BAOA,SAAsBC,GAAtB,iBAAAP,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,IAAMiC,IAAIpC,KAAKK,SAAS,oBAAoBG,EAAI,CACnE6B,OAAQ,eAFhB,cACU/B,EADV,OAIUC,EAAsBD,EAASC,KAJzC,kBAKWA,GALX,gE,KAWwB,IAAK8K,IAA6B,EAAO,GChEtD,SAASK,GAAmBrN,GAAO,IAAD,EACvCsN,EAAoCtN,EAAMuN,eAChD,EAA4CjK,mBAASgK,GAArD,WAAOC,EAAP,UAGgB,IAAIP,GAGpB,SAASQ,IACL,MAA4B,WAAzBD,EAAevJ,OAAsC,cAACjE,EAAD,CAAaG,MAAO,eAAgBD,QAAS,eACnE,cAA1BsN,EAAevJ,OAAiC,cAACjE,EAAD,CAAaG,MAAO,0BAA2BD,QAAS,eACxD,6BAG5D,SAASwN,IAAsB,IAAD,EAC1B,OAAO,eAACtN,EAAA,EAAD,CAAMC,MAAO,CAACY,cAAc,OAA5B,UACH,cAAC4B,EAAD,CAAWC,KAAM,WAAW,cAACD,EAAD,CAAWC,KAAI,eAAE0K,OAAF,EAAEA,EAAgBvJ,QAAlB,EAA4B,YAAY,cAACwJ,EAAD,OAI3F,SAASE,IACL,IAAIC,EAAmB,GACvB,IAAK,IAAD,EACA,IAAG,SAAAJ,EAAeK,wBAAf,IAAkCR,QAAQ,EAAG,MAAO,iCACvD,IAAI,IAAID,EAAG,EAAGA,EAAII,EAAeK,kBAAkBR,OAAQD,IAC9CQ,GAAH,GAAHR,EAAkB,MAAOI,EAAeK,kBAAkBT,GAAGzG,KAC/C,QAAS6G,EAAeK,kBAAkBT,GAAGzG,KAElE,OAAIiH,EACG,QADgB,iCAEzB,MAAOE,GACL,MAAO,kCAgBf,OACA,mCACI,cAAC3I,EAAD,CAAYE,UAAS,eAAIpF,OAAJ,EAAIA,EAAOoF,WAAX,EAAwB,kBAAoBD,MAAO,eAb5E,WACI,IAAM2I,EAAe,IAAIlH,KAAK2G,EAAeQ,SAC7C,OACA,qCACI,cAACnL,EAAD,CAAWC,KAAI,SAAW0K,EAAeS,OACzC,cAACpL,EAAD,CAAWC,KAAI,YAAciL,EAAY/E,eAA1B,QAAgD+E,EAAYxF,uBAC3E,eAACnI,EAAA,EAAD,WAAM,cAACyC,EAAD,CAAWC,KAAM,yBAAyB,cAACD,EAAD,CAAWC,KAAM6K,SACjE,cAACD,EAAD,SAMoE,QChDjE,SAASQ,KAEpB,IACA,EAAwB3K,mBADY,IACpC,WAAOpB,EAAP,KAAagM,EAAb,KACA,EAAwB5K,mBAASyJ,GAASE,KAA1C,WAAOkB,EAAP,KAAaC,EAAb,KACM3K,EAAU,IAAIuJ,IAA6B,GAgBjD,SAAeqB,EAAmB9L,GAAlC,eAAAX,EAAAC,OAAA,2EAAAD,EAAA,MAEmC6B,EAAQ6K,cAAc/L,IAFzD,OAEcgM,EAFd,OAGQrN,QAAQC,IAAIoN,GACTA,IAAeL,EAAQ,IAAIA,EAAQK,GAAcH,EAAQ7L,IAJpE,gDAMQrB,QAAQC,IAAI,0BANpB,gEA0DA,OAvEAuC,qBAAU,WAGR,OAFE2K,EAAmBtB,GAASE,KAEvB,eAGN,IAkEH,eAAC9M,EAAA,EAAD,WACI,cAACyC,EAAD,CAAWC,KAAM,yBACjB,eAnDL,WACI,OAAO,cAACD,EAAD,CAAWC,KAAI,mBAAqBkK,GAASoB,OAkDnD,IACA,eAhDL,WACC,OAAO,eAAChO,EAAA,EAAD,CAAMC,MAAO,CAACY,cAAc,OAA5B,UACH,cAACjB,EAAD,CAAaG,MAAO,MAAOD,QAAS,kBAAKoO,EAAmBtB,GAASE,QACrE,cAAClN,EAAD,CAAaG,MAAO,UAAWD,QAAS,kBAAKoO,EAAmBtB,GAASyB,YACzE,cAACzO,EAAD,CAAaG,MAAO,aAAcD,QAAS,kBAAKoO,EAAmBtB,GAAS0B,eAC5E,cAAC1O,EAAD,CAAaG,MAAO,WAAYD,QAAS,kBAAKoO,EAAmBtB,GAAS2B,cAC1E,cAAC3O,EAAD,CAAaG,MAAO,YAAaD,QAAS,kBAAKoO,EAAmBtB,GAAS4B,mBA0C3E,IACA,cAAC5O,EAAD,CAAaG,MAAO,UAAWD,QAAS,WAAKoO,EAAmBF,MAChE,eAlBJ,WACI,OAAO,MAAJjM,OAAA,EAAAA,EAAMkL,QAAQ,EACN,cAACwB,GAAA,EAAD,CACP1M,KAAMA,EACN2M,aAAc,SAACC,GAAD,OAAUC,iBACxBC,WAAY,YAAe,IAAD,IAAXF,EAAW,EAAXA,KAAa,OAAQ,cAACzB,GAAD,CAAqBjI,UAAS,yBAAa0J,OAAb,EAAaA,EAAMd,MAAnB,EAA2B,WAA3B,qBAAyCc,OAAzC,EAAyCA,EAAM9K,QAA/C,EAAyD,WAAauJ,eAAgBuB,OAGhJ,cAAClM,EAAD,CAAWC,KAAI,wBAA0BkK,GAASoB,OAU9D,OC1FO,SAASc,KAGsB,IAAI3N,GAAmB,GAAjE,IACA,EAAqCgC,mBAAoB,IAAzD,WAAO4L,EAAP,KAAsBC,EAAtB,KAWA,SAASC,EAAaC,GAClB,IACMzD,EAD4B,CAAC,CAACzJ,GAAI,IAAIf,WAAW,EAAMkO,MAAO,OAAOC,MAAO,MAAM9M,SAAU,SAASC,SAAU,QAC5E8M,MAAK,SAAC5D,GAAY,OAAOA,EAASzJ,KAAOkN,KAElF,OADAnO,QAAQC,IAAI,WAAYyK,GACpBA,EACQA,EAAS0D,MADA,gBAWzB,OAzBA5L,qBAAU,WAEV,EAAA9B,EAAAC,OAAA,gDAKIsN,EADiC,CAAC,CAAC7M,IAAK,IAAKC,KAAM,WAAYkN,UAAW,MAAO,CAACnN,IAAK,IAAKC,KAAM,SAAUkN,UAAW,cAJ3H,8DAF+B,IAyBxB,qCACH,cAAC7M,EAAD,CAAWC,KAAM,2BACjB,eATJ,WACI3B,QAAQC,IAAI,gBAAgB+N,GAC5B,IAAMQ,EAAUR,EAAc/E,KAAI,SAACwF,EAASlP,GAAO,OAAM,cAACmC,EAAD,CAAqBC,KAAI,SAAWuM,EAAaO,EAAQrN,KAAhC,aAAiDqN,EAAQpN,KAAzD,gBAA6EkH,EAAekG,EAAQF,WAApG,QAAThP,MAEzE,OAAQ,cAACN,EAAA,EAAD,UAAOuP,MAKf,OCvBO,SAASE,KAEtB,MAA0BtM,mBAASvF,EAAM8R,SAAzC,WAAOnR,EAAP,KAAcC,EAAd,KACA,EAAkC2E,mBAAS,GAA3C,WAAOwM,EAAP,KAAkB7O,EAAlB,KACA,EAAsCqC,oBAAS,GAA/C,WAAOpF,EAAP,KAAoBC,EAApB,KAEA,EAAwBmF,mBADO,CAACnB,GAAI,EAAEf,WAAW,EAAMkO,MAAO,GAAGC,MAAO,GAAG9M,SAAU,GAAGC,SAAU,KAClG,WAEMzE,EAAkC,CACtCC,YAAaA,EACbC,eAAgBA,EAChBC,KALF,KAMEE,QANF,MAQMyR,EAA2C,CAACrR,MAAMA,EAAMC,SAASA,GAqBvE,OACE,cAACwB,EAAA,EAAD,CAAMC,MAAOmF,GAAOyK,UAApB,SACE,cAACzR,EAAW0R,SAAZ,CAAqB9L,MAASlG,EAA9B,SACE,cAACQ,EAAawR,SAAd,CAAuB9L,MAAU4L,EAAjC,SACE,cAACG,EAAA,EAAD,UACA,eAxBR,WACE,OAAOJ,GAGL,KAA4B,EAAG,OAAQ,mCAAE,cAACxE,GAAD,CAAWzK,QAASI,MAC7D,KAA4B,EAAG,OAAQ,qCAAE,cAACH,EAAD,CAAQG,aAAcA,IAAe,cAACgN,GAAD,OAC9E,KAA4B,EAAG,OAAQ,qCAAE,cAACnN,EAAD,CAAQG,aAAcA,IAAe,cAACwJ,GAAD,OAC9E,KAA4B,EAAG,OAAQ,qCAAE,cAAC3J,EAAD,CAAQG,aAAcA,IAAe,cAACoC,EAAD,OAC9E,KAA4B,EAAG,OAAQ,qCAAE,cAACvC,EAAD,CAAQG,aAAcA,IAAe,cAACgO,GAAD,OAC9E,KAA4B,EAAG,OAAQ,qCAAE,cAACnO,EAAD,CAAQG,aAAcA,IAAe,cAACsL,GAAD,OAE9E,KAA4B,EAAG,OAAQ,mCAAE,cAAC9B,GAAD,MACzC,KAA4B,EAAG,OAAQ,mCAAE,cAACwD,GAAD,MACzC,KAA4B,EAAG,OAAQ,mCAAE,cAACrL,EAAD,CAAWC,KAAM,cAC1D,KAA4B,EAAG,OAAQ,mCAAE,cAACD,EAAD,CAAWC,KAAM,WAC1D,QAA+B,OAAQ,mCAAE,cAACD,EAAD,CAAWC,KAAM,iBAStD,YAQV,IAAM0C,GAASC,IAAWC,OAAO,CAC/BuK,UAAW,CACT3J,KAAM,EACNrB,gBAAiB,OACjBc,WAAY,SACZQ,eAAgB,a","file":"static/js/app.b420b4b2.chunk.js","sourcesContent":["import { useContext } from \"react\";\nimport { Platform } from \"react-native\";\nimport { themeContext } from \"./themecontext\";\n\n\n\n\nexport enum Theme{\n    default,\n    light,\n    dark,\n    hacker\n}\n\nexport enum Color{\n    Text,\n    textHeader,\n    textTitle,\n    Button,\n    ModalBackground,\n    ModalInner,\n    InputText,\n    primaryColor,\n    SecondaryColor,\n    TertiaryColor,\n}\n\nexport default function GetColor(colorType:Color){\n    const context = useContext(themeContext);\n    let returnColor = '#ffffff'\n\n    switch(context.theme){\n        case Theme.light:{\n            switch(colorType){\n                case Color.Text: { returnColor = 'ivory' ; break}\n                case Color.textHeader: { returnColor = 'ivory' ; break}\n                case Color.textTitle: { returnColor = 'ivory' ; break}\n                case Color.Button: { returnColor = 'chocolate' ; break}\n                case Color.InputText: { returnColor ='linen'; break}\n                case Color.ModalBackground: { returnColor = '#96D65E'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#5B995A' ; break}\n                case Color.SecondaryColor: { returnColor = '#824026' ; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            }\n        }\n        case Theme.dark:{\n            switch(colorType){\n                case Color.Text: { returnColor = 'ivory' ; break}\n                case Color.textHeader: { returnColor = 'ivory' ; break}\n                case Color.textTitle: { returnColor = 'ivory' ; break}\n                case Color.Button: { returnColor = 'chocolate' ; break}\n                case Color.InputText: { returnColor ='linen'; break}\n                case Color.ModalBackground: { returnColor = '#96D65E'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#5B995A' ; break}\n                case Color.SecondaryColor: { returnColor = '#824026' ; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            }\n        }\n        case Theme.hacker:{\n            switch(colorType){\n                case Color.Text: { returnColor = 'ivory' ; break}\n                case Color.textHeader: { returnColor = 'ivory' ; break}\n                case Color.textTitle: { returnColor = 'ivory' ; break}\n                case Color.Button: { returnColor = 'chocolate' ; break}\n                case Color.InputText: { returnColor ='linen'; break}\n                case Color.ModalBackground: { returnColor = '#96D65E'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#5B995A' ; break}\n                case Color.SecondaryColor: { returnColor = '#824026' ; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            }\n        }\n        default:{\n            switch(colorType){\n                case Color.Text: { returnColor = 'ivory' ; break}\n                case Color.textHeader: { returnColor = 'ivory' ; break}\n                case Color.textTitle: { returnColor = 'ivory' ; break}\n                case Color.Button: { returnColor = 'chocolate' ; break}\n                case Color.InputText: { returnColor ='linen'; break}\n                case Color.ModalBackground: { returnColor = '#96D65E'}\n                case Color.ModalInner: { returnColor = '#ffffff'}\n                case Color.primaryColor: { returnColor = '#5B995A' ; break}\n                case Color.SecondaryColor: { returnColor = '#824026' ; break}\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\n                default:      { returnColor = '#ffffff' ; break}\n            }\n        }\n    }\n    if(Platform.OS == \"android\"){ return `${returnColor }`}\n    else return returnColor \n\n}\n","import { createContext } from \"react\";\nimport { Employee } from \"./api-entities\";\n\n\n\nexport interface AppContextInterface{\n    clockStatus:boolean\n    setClockStatus:React.Dispatch<React.SetStateAction<boolean>>\n    user:Employee\n    setUser:React.Dispatch<React.SetStateAction<Employee>>\n\n}\n\n\nexport const initContext: AppContextInterface = {\n    clockStatus: false,\n    setClockStatus: ()=>{},\n    user: undefined,\n    setUser: ()=>{}\n}\n\nexport const appContext = createContext(initContext);","import { createContext, useContext } from \"react\";\nimport { Theme } from \"./colorstyle\";\n\n\n\n/**this interface is used for intellisense for the 'Theme' useContext*/\nexport interface ThemeContextInterface{\n    theme:Theme\n    setTheme:Function\n}\n\nexport const themeContextObject:ThemeContextInterface = {theme:0,setTheme:()=>{}}\n\n/**This is the global 'Theme' context*/\nexport const themeContext = createContext(themeContextObject)","import React from \"react\";\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, View } from \"react-native\";\nimport { v4 } from \"uuid\";\nimport GetColor, { Color } from \"./colorstyle\";\n\n\nexport default function BasicButton(props){\n    const {onPress, title} = props;\n\n    return(\n    <View style={{padding:3 }}>\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} // << main propers here\n        //Extra attributes added\n\n        disabled = { props.disabled} key={ props.key} testID={props.testID}\n        /*this is the close of the button tag*//> \n    </View>)\n}","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport React from \"react\";\nimport { View } from \"react-native\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\n\nexport default  function LogoutButton(props){\n    return (\n        <View>\n            <BasicButton title={\"Logout\"} onPress={()=>{\n                AsyncStorage.removeItem(\"user\");\n                props.setPage(0);\n            }} />\n        </View>\n    )\n}","import React, { useContext, useEffect } from \"react\";\nimport { View } from \"react-native\";\nimport { appContext } from \"../../classes-interface/app-conext\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport LogoutButton from \"../pages/logoutButton\";\n\n\n\n\n\nexport default function NavBar(props){\n    const context = useContext(appContext)\n\n    function ManagerOptions(props){\n        console.log(context.user.isManager);\n        if(context.user.isManager){ \n            return (\n            <>\n                <BasicButton title={\"View Employee Status\"} onPress={ ()=>{props.setPageIndex(4)}}/>\n                <BasicButton title={\"Review Problems\"} onPress={ ()=>{props.setPageIndex(5)}}/>\n            </>)}\n        else{return <></>}\n    }\n\n    return (\n    <View style={{flexDirection:\"row\"}}>\n        <BasicButton title={\"View Request\"} onPress={ ()=>{props.setPageIndex(1)}}/>\n        <BasicButton title={\"Manage Events\"} onPress={ ()=>{props.setPageIndex(2)}}/>\n        <BasicButton title={\"Time Sheet\"} onPress={ ()=>{props.setPageIndex(3)}}/>\n        < ManagerOptions setPageIndex={props.setPageIndex}/>\n        <LogoutButton setPage={props.setPageIndex}/>\n    </View>)\n}","import React from 'react'\nimport { View,Text } from 'react-native'\nimport GetColor, { Color } from './colorstyle'\n\n\n\n\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\nexport default function BasicText(props){\n    const {text} = props\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\n    //This will grab from the props the type of text for styling\n    // is not found, it will default to general text\n    const textType:TextType = props?.type ?? TextType.General\n    return (\n    <View style={{padding:3}}>\n        <Text style={getTextStyle(textType)}>{text}</Text>\n    </View>)\n}\n\n/**The type */\nexport enum TextType{\n    Title,\n    Header,\n    General\n}\nfunction getTextStyle(textType:TextType){\n    switch(textType){\n    case TextType.Title  :  {return {color:GetColor(Color.Text), fontSize:70}}\n    case TextType.Header :  {return {color:GetColor(Color.Text), fontSize:50}}\n    // The default case should be exactly the same as the general text as an edge case\n    case TextType.General:  {return {color:GetColor(Color.Text), fontSize:20}}\n    default              :  {return {color:GetColor(Color.Text), fontSize:20}}\n    //=================================================================================\n    }\n}","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { Employee, WorkLog } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\nexport interface EmployeeHandlerInterface{\n    /**gets all logs for manager*/\n    getWorklogs(): Promise<WorkLog[]>\n\n    getWorklogByID(id:number): Promise<WorkLog>\n\n    clockin(wId:number , type: string ): Promise<WorkLog>\n    \n    clockout(wId:number , type: string): Promise<WorkLog>\n    \n    login(username:string, password:string): Promise<Employee>\n    \n\n}\n\n\nexport default class employeeAPIHandler implements EmployeeHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.124.74.192:3000\";\n    private devMode:boolean = false;\n    private IndexURL =0;\n    /* private context = useContext(appContext); */\n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n    }\n\n    async getWorklogs() {\n        const response = await axios.get(this.getURL()+\"/worklogs\");\n        const data:WorkLog[] = response.data;\n        return data;    \n    }\n\n    async getWorklogByID(id:number) {\n        const response = await axios.get(this.getURL()+\"/worklogs\");\n        const filter = response.data.filter(w => w.id === id);\n        const data:WorkLog = filter[0];\n        return data;\n    }\n    \n    async clockin(wId:number , type: string) {\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\n            wId:wId,\n            type:type\n        });\n        const data:WorkLog = response.data;\n        return data;    \n    }\n\n    async clockout(wId:number , type: string) {\n        const response = await axios.post(this.getURL()+\"/worklogs\",{\n            wId:wId,\n            type:type\n        });\n        const data:WorkLog = response.data;\n        return data;    \n    }\n\n    async login(username:string, password:string) {\n        try {\n            const response = await axios.patch(this.getURL()+\"/login\",{\n                username:username,\n                password:password\n            });\n            const data:Employee = response.data;\n            return data;\n        } catch (error) {\n            console.log(\"Login failed\");\n        }\n}\n\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { appContext } from \"../../classes-interface/app-conext\";\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\n\n\n\n\nexport default function ClockingScreen(){\n    const context = useContext(appContext)\n\n    const [clockCheck, setClockCheck] = useState(false)\n    const handler = new employeeAPIHandler()\n    useEffect(() => {\n        syncClock()\n        return () => {}}, [])\n\n    async function syncClock(){\n        const workLog = await handler.getWorklogByID(context.user.id)\n        if(workLog.type == \"CHEKIN\" ){setClockCheck(true)}\n        else{setClockCheck(false)}\n    }\n\n    function changeClockText(){\n        if(clockCheck){return \"Clock Out\"}\n        else{return \"Clock-In\"}\n    }\n    \n    async function changClockStatus(){\n        setClockCheck(!clockCheck);\n        if(!clockCheck) await handler.clockin(context.user.id,\"Clock-In\")\n        else await handler.clockout(context.user.id,\"Clock-In\") \n    }\n\n    return(\n        <View>\n            <BasicText text={changeClockText()}/>\n            <BasicButton title={'Change Status'} onPress={changClockStatus}/>\n        </View>)\n\n}","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { Event } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\n\n\nexport interface EventHandlerInterface{\n    getAllEvents(): Promise<Event[]>      \n    /**put -> cancel*/\n    cancelEvent(id:string): Promise<Event>\n    /**put -> update*/\n    updateEvent(id:string, event:Event): Promise<Event>\n    /**post -> create*/\n    createEvent(event:Event): Promise<Event>\n\n    getEventByID(id: string): Promise<Event>\n\n}\n\n\nexport default class EventAPIHandler implements EventHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.124.74.192:3000\";\n    private devMode:boolean = false;\n    private IndexURL = 0;\n    //private context = useContext(appContext);\n    \n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n    }\n\n    async getAllEvents(): Promise<Event[]> {\n        const response = await axios.get(this.getURL()+\"/events\");\n        const data:Event[] = response.data;\n        return data;    \n    }\n    \n    async cancelEvent(id:string) {\n        const response = await axios.put(this.getURL()+\"/events\",\n        {\n            id:id,\n            status:\"Cancelled\"\n        });\n        const data:Event = response.data;\n        return data;\n        }\n        \n    async createEvent(event:Event) {\n        const response = await axios.post(this.getURL()+\"/events\",event);\n        const data:Event = response.data;\n        return data;\n    }\n\n    async getEventByID(id: string) {\n        const response = await axios.get(this.getURL()+\"/events/\"+id);\n        const data:Event = response.data;\n        return data;\n    }\n\n    async updateEvent(id:string, event:Event) {\n        const response = await axios.put(this.getURL()+\"/events\",\n        {\n            id:id,\n            ...event\n        });\n        const data:Event = response.data;\n        return data;\n    }\n        \n}\n","import React from \"react\";\nimport { TextInput, View } from \"react-native\";\nimport GetColor, { Color } from \"./colorstyle\";\n\n\nexport default function BasicInputText(props){\n    const {value, onChangeText, placeholder} = props;\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\n    const keyboardType = props?.keyboardType ?? 'default';\n    const editable = props?.editable ?? true;\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\n\n    return(\n    <View style={{backgroundColor:GetColor(Color.InputText), padding:3}}> \n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \n    keyboardType={keyboardType} editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}/>\n    </View>)\n}\n","import React, { useState } from \"react\";\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\nimport BasicButton from \"./basicbutton\";\nimport BasicText from \"./basictext\";\nimport GetColor, { Color } from \"./colorstyle\";\n\n\n\nexport default function BasicModal(props){\n  let child = props.child\n  const openTitle = props?.openTitle ?? \"null open title\"\n  \n\n  const [show, setShow] = useState(false);\n  const styles = StyleSheet.create({\n    modalView: {\n      flexDirection:\"column\",\n      margin: 20,\n      backgroundColor:GetColor(Color.Modal),\n      borderRadius: 20,\n      padding: 35,\n      alignItems: \"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 0\n      }\n  }\n});\n\n    return(\n      <View>\n        <Modal\n          animationType=\"slide\"\n          transparent={true}\n          visible={show}\n          onRequestClose={() => {setShow(!show)}}>\n          <View style={ {flex: 1, justifyContent: \"center\", alignItems: \"center\", marginTop: 22, backgroundColor:GetColor(Color.Modal)} }>\n            <View style={styles.modalView}>\n\n              <View>\n                {child}\n              </View>\n              <View>\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\n              </View>\n\n            </View>\n          </View>\n        </Modal>\n\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\n\n      </View>)\n      \n}\n\n\n\n","import { useEffect, useState } from \"react\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport { Event as Evvent } from \"../../classes-interface/api-entities\"\nimport UpdateAllEventsState from \"./update-allEvents-state\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\nimport { View, Text } from \"react-native\";\n\nexport default function CreateEventOption(props:{allEvents: Evvent[], setAllEvents: Function}){\n\n    const [title, setTitle] = useState<string>(\"\")\n    const [desc, setDesc] = useState<string>(\"\")\n    const [date, setDate] = useState(new Date());\n    //const [time, settime] = useState(new Date())\n    const [showDateAndTime, setShowDateAndTime] = useState(false)\n    const [showDatePicker, setShowDatePicker]= useState(false)\n    const [showStartTimePicker, setShowStartTimePicker]= useState(false)\n    const [showEndTimePicker, setShowEndTimePicker] = useState(false)\n    const [startTime, setStart] = useState(()=>{let date = new Date(); if (date.getHours() > 12) {date.setHours(date.getHours()-12); return date} else{return date}})\n    const [endTime, setEnd] = useState(()=>{let date = new Date(); if (date.getHours() > 12) {date.setHours(date.getHours()-12); return date} else{return date}})\n    const [startAntePost, setStartAntePost] = useState(\"PM\")\n    const [endAntePost, setEndAntePost] = useState(\"PM\")\n    const [location, setLocation] = useState<string>(\"\")\n\n    //<BasicText text={(`${(new Date(context.reservationData.checkOut ?? 'N/A')).toDateString()} At: ${(new Date(context.reservationData.checkOut ?? \"N/A\")).toLocaleTimeString() }`)}/>\n    //useEffect(()=>{setTimeout(()=>setShowDateAndTime(false),300)  }, [endTime])\n\n    function formattedStartTime(time: Date){\n        const hours = time.getHours()\n\n        if (hours < 1 || hours > 12){\n            time.setHours(time.getHours() -12)\n            //setStart(time || startTime)\n        }\n        // else{\n        //     setStart(time || startTime)\n        // }\n\n        if (hours < 12) setStartAntePost('AM')\n        else setStartAntePost(\"PM\")\n        const formattedTime = time.toLocaleTimeString().slice(0,-3)\n        return(`${formattedTime} ${startAntePost}`)\n    }\n\n    function formattedEndTime(time: Date){\n        const hours = time.getHours()\n        if (hours < 1 || hours > 12){\n            time.setHours(time.getHours() -12)\n            setEnd(time || startTime)\n        }\n        else{\n            setEnd(time || startTime)\n        }\n\n        if (hours < 12) setEndAntePost('AM')\n        else setEndAntePost(\"PM\")\n\n    }\n\n    function RenderStartTime(){\n        return(\n            <DateTimePicker\n            testID=\"dateTimePicker\"\n            value={startTime}\n            mode={'time'}\n            is24Hour={false}\n            display=\"clock\"\n            onChange={(event, selectedTime: Date)=>{console.log(\"start on change\", selectedTime.toLocaleTimeString()); setShowStartTimePicker(false); setStart(selectedTime || startTime)}}\n        />) \n    }\n\n    function RenderEndTime(){\n        return(\n            <DateTimePicker\n            testID=\"dateTimePicker\"\n            value={endTime}\n            mode={'time'}\n            is24Hour={false}\n            display=\"clock\"\n            onChange={(event, selectedTime: Date)=>{console.log(\"end on change\",selectedTime.toLocaleTimeString()); setShowEndTimePicker(false); setEnd(selectedTime || endTime)}}\n        />) \n    }\n\n    function RenderDate(){\n        return(<DateTimePicker\n            testID=\"dateTimePicker\"\n            value={date}\n            mode={'date'}\n            is24Hour={false}\n            display=\"default\"\n            onChange={(event, selectedDate)=>{console.log(\"date on Change\"); setShowDatePicker(false); setDate(selectedDate || date)}}/> \n        )\n    }\n\n    function DateAndTime(){\n        if (showDateAndTime){\n            if(showDatePicker){\n                return (<RenderDate/>)\n            }\n            else if(showStartTimePicker){\n                return (\n                    <RenderStartTime/>\n                )\n            }\n            else if (showEndTimePicker )\n                {return (<RenderEndTime/>)}\n            else return (<></>)\n        }\n        else return (<></>) \n    }\n\n    const createEventStates = {title: title, desc: desc, startTime: startTime, endTime: endTime, location: location, allEvents: props.allEvents, setAllEvents: props.setAllEvents, startAntePost: startAntePost, endAntePost: endAntePost}\n\n    //console.log(showDatePicker)\n    function InputFields(inputFieldsProps){\n        return(\n            <>\n                <BasicInputText value={title} onChangeText={setTitle} placeholder={'title'}/>\n                <BasicInputText value={desc} onChangeText={setDesc} placeholder={'description'}/>\n                <BasicInputText value={location} onChangeText={setLocation} placeholder={'location'}/>\n                <BasicButton onPress={()=>{setShowDatePicker(true); setShowStartTimePicker(true); setShowEndTimePicker(true); setShowDateAndTime(true); }  } title={'set date and time'}/>\n                <DateAndTime/>\n                <BasicText text={`Start Date: ${date.toDateString()}`}/>\n                <BasicText text={`Start Time: ${startTime.toLocaleTimeString().slice(0,-3)}`}/>\n                <BasicText text={`End Time: ${endTime.toLocaleTimeString().slice(0,-3)}\\n\\n`}/>\n                {/* <BasicInputText value={startTime ?? ''} onChangeText={setStart} placeholder={'start time'} keyboardType={'numeric'}/> */}\n                {/* <BasicInputText value={endTime ?? ''} onChangeText={setEnd} placeholder={'end time'}/> */}\n                <BasicButton onPress={()=>UpdateAllEventsState(inputFieldsProps)} title={'Update Event List'}/>\n            </>\n        )\n    }\n\n    return(\n        <BasicModal child={InputFields(createEventStates)} openTitle={\"Create Event\"}/>\n    )\n}\n","import { Event as Evvent } from \"../../classes-interface/api-entities\"\n\nexport default function UpdateAllEventsState(props){\n    const newEvent: Evvent = {\n        id:'random',\n        title:props.title,\n        desc:props.desc,\n        startTime:props.startTime,\n        endTime:props.endTime,\n        location:props.location,\n        status:\"On Schedule\"\n    }    \n    //const allEventsClone = props.allEvents\n    props.allEvents.push(newEvent)\n    console.log(\"🚀 ~ file: event-creation-option.tsx ~ line 26 ~ UpdateEventList ~ props.allEvents\", props.allEvents)\n\n    props.setAllEvents([...props.allEvents]) //update parent state. The [...] is needed to create a new array in memory!!\n\n}","export default function FormattedTime(time: Date){\n    time.toLocaleString()\n    const hours = time.getHours()\n    let AMorPM = \"\"\n    if (hours < 1 || hours > 12){\n        time.setHours(time.getHours() -12)\n    }\n    if (hours < 12) AMorPM = 'AM'\n    else AMorPM = 'PM'\n    const formattedTime = time.toLocaleTimeString().slice(0,-3)\n    return(`${formattedTime} ${AMorPM}`)\n}\n\nexport function GetDateFromNum(num: number){\n    const date = new Date(num * 1000).toUTCString()\n    console.log(date)\n    return date\n}","import { Event as Evvent } from \"../../classes-interface/api-entities\"\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\"\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\"\nimport FormattedTime from \"./event-date-formatting\"\n\n\nexport default function FormatSingleEvent(props:{event: Evvent, index:number, allEvents?: Evvent[], setAllEvents?: Function, filter?: string}){\n    const {id,title,desc,startTime,endTime,location,status} = props.event   \n    \n    const startTimeToDate = new Date(startTime)\n    const endTimeToDate = new Date(endTime)\n    const startTimeFormatted = FormattedTime(startTimeToDate)\n    const endTimeFormatted = FormattedTime(endTimeToDate)\n\n    function CancelEvent(id: string){\n        const newEventList = props.allEvents.map(event=> {\n            if(event.id === id) {event.status = \"Cancelled\"; return(event)} \n            else{return event} \n        })\n        props.setAllEvents([...newEventList])\n    }\n\n    return (<>\n        {props.filter === id || !props.filter ?\n        <>\n            <BasicText text={`\\n\\n Event ${props.index + 1}`}/>\n            <BasicText text={`id: ${id}`}/>\n            <BasicText text={`title: ${title}`}/>\n            <BasicText text={`description: ${desc}`}/>\n            <BasicText text={`start time: ${startTimeFormatted}`}/>\n            <BasicText text={`end time: ${endTimeFormatted}`}/>\n            <BasicText text={`location: ${location}`}/>\n            <BasicText text={`status: ${status}`}/>\n            <BasicButton title={\"Cancel Event\"} onPress={()=>CancelEvent(props.event.id)}></BasicButton>\n        </> \n\n        :\n        \n        null}\n    </>)\n}","import { useEffect, useState } from \"react\";\nimport { ProgressViewIOSComponent } from \"react-native\";\nimport EventAPIHandler, {EventHandlerInterface} from \"../../classes-interface/eventhandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\n\n\nexport default function GetEventByID(props:{setFilteredEventID: Function}){\n    const [eventID, setEventID] = useState<string>(\"\")\n    useEffect(()=>{props.setFilteredEventID(eventID)}, [eventID])\n    return(\n        <>\n            {/* <BasicButton title={\"Search For An Event\"} onPress={()=>FilterEvents()}/> */}\n            <BasicInputText value={eventID} onChangeText={setEventID} placeholder={'Event ID'}/>\n        </>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { FlatList, ScrollView, View, Text } from \"react-native\"\nimport { Event } from \"../../classes-interface/api-entities\"\nimport EventAPIHandler, { EventHandlerInterface } from \"../../classes-interface/eventhandler\"\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\"\nimport CreateEventOption from \"../children/create-event-option\"\nimport FormatSingleEvent from \"../children/format-single-event\"\nimport GetEventByID from \"../children/get-event-by-ID\"\n\nexport default function EventsPage(){\n    const eventhandle: EventHandlerInterface = new EventAPIHandler(true)\n    const dummyEvents: Event[] = [] /* = [{\n            id: 'dummyevent1',\n            title: 'title',\n            desc: 'desc',\n            startTime: 100,\n            endTime: 200,\n            location: 'location',\n            status: \"On Schedule\"\n        },\n        {\n            id: 'dummyevent2',\n            title: 'title2',\n            desc: 'desc2',\n            startTime: 300,\n            endTime: 400,\n            location: 'location2',\n            status: \"Cancelled\"\n        }\n    ] */\n    const [allEvents, setAllEvents] = useState(dummyEvents)\n    const [filteredEventID, setFilteredEventID] = useState<string>(\"\")\n\n    useEffect(() => {\n        setAll()\n    }), []\n\n    async function setAll(){\n        const events = await eventhandle.getAllEvents()\n        setAllEvents(events)\n    }\n\n    //map all events into a scroll list\n    function FormattedEventsList(){\n        const formattedEvents = allEvents.map((event, index) => {return <FormatSingleEvent event={event} index={index} allEvents={allEvents} setAllEvents={setAllEvents} filter={filteredEventID}/>})        \n        return(\n            <View>\n                <ScrollView>\n                {formattedEvents}\n                </ScrollView>\n            </View>\n        )\n    }\n    return(\n        <>\n            <GetEventByID setFilteredEventID={setFilteredEventID}/>\n            <CreateEventOption allEvents={allEvents} setAllEvents={setAllEvents}/>\n            <FormattedEventsList/>\n        </>\n    )\n}\n","import React from \"react\"\nimport { View } from \"react-native\"\n\n\n/**this is a component for spacing elements with absolute pixels. @attribute height, width will default to 0. others include minWidth, maxWidth, minHight, maxHight*/\nexport default function PixelSpacer(props){\n    const height = props?.height ?? 0\n    const width = props?.width ?? 0\n    const {minHeight,minWidth,maxHeight,maxWidth} = props\n\n\n    return(<View style={{height:height, width:width, minHeight, minWidth, maxHeight, maxWidth}}/>)\n}","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport React, { useContext, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { appContext, AppContextInterface } from \"../../classes-interface/app-conext\";\nimport employeeAPIHandler from \"../../classes-interface/employeehandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\n\n\n\nexport default function LoginPage(props) {\n  const context: AppContextInterface = useContext(appContext)\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  async function tryLogin() {\n    const employee = new employeeAPIHandler(true);\n    \n    const response = await employee.login(userName, password);\n    const emp = response;\n    console.log(emp);\n    if(emp.password === password && emp.username === userName){\n      context.setUser(emp);\n      setPage();\n    }\n  }\n\n  function setPage(){\n    props.setPage(1);\n    alert(\"Be sure to clock in! \");\n  }\n\n\n  return (\n    <View>\n      <BasicText\n        text={\"Welcome to Safari Solace Resorts\"}\n        textType={TextType.Title}\n      />\n      <PixelSpacer height={5} />\n      <BasicInputText\n        value={userName}\n        onChangeText={t => setUserName(t)}\n        placeholder={\"Username\"}\n      />\n      <PixelSpacer height={5} />\n      <BasicInputText\n        value={password}\n        onChangeText={t => setPassword(t)}\n        placeholder={\"Password\"}\n      />\n      <PixelSpacer height={5} />\n      <BasicButton title={\"Login\"} onPress={tryLogin} />\n    </View>\n  );\n}\n","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { Problem } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\nexport interface ProblemHandlerInterface{\n    getAllProblems():Promise <Problem[]>\n\n    getByProblemID(id:string) : Promise<Problem>\n\n    markReviewed(id:string, status:string) : Promise<Problem>\n}\n\nexport default class ProblemAPIHandler implements ProblemHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.124.74.192:3000\";\n    private devMode:boolean = false;\n    private IndexURL =0;\n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n\n    }\n    async getAllProblems():Promise <Problem[]> {\n        const response = await axios.get(this.getURL()+\"/problems\");\n        const data:Problem[] = response.data;\n        return data;    \n    }\n\n    async getByProblemID(id:string) {\n        const response = await axios.get(this.getURL()+\"/problems/\"+id);\n        const data:Problem = response.data;\n        return data;    \n    }\n\n    async markReviewed(id:string, status:string) {\n        const response = await axios.put(this.getURL()+\"/problems/\"+id,\n        {\n            id:id,\n            status:status\n        });\n        const data:Problem = response.data;\n        return data;\n    }\n\n\n\n}\n\n\n//export const httpHandler1 = new ProblemAPIHandler(false, 1);","import { Problem } from \"../../classes-interface/api-entities\";\nimport ProblemAPIHandler, { ProblemHandlerInterface } from \"../../classes-interface/problemhandler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\n\nexport default function ProblemItem(props: Problem){\n\n    const {id, desc, submittedTime, status, photoLink} = props;\n\n    const handler: ProblemHandlerInterface = new ProblemAPIHandler();\n\n    function setReviewed(){\n        handler.markReviewed(id, \"Reviewed\");\n    }\n\n    function renderPage(){\n        return(<>\n            <BasicText text={`Description: ${desc}`}/>\n            <BasicText text={`Time Submitted: ${submittedTime}`}/>\n            <BasicText text={`Status: ${status}`}/>\n            {photoLink ? <BasicButton onPress={()=>{window.location.href=photoLink}} title={\"Download Photo\"}/> : <BasicText text={\"No uploaded image...\"}/>}\n            <BasicButton onPress={setReviewed} title={\"Mark as reviewed\"}/>\n        </>)\n    }\n\n    return(<>\n        <BasicModal child={renderPage()} openTitle={desc}/>\n    </>)\n}","import React, { useEffect, useState } from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport { Problem } from \"../../classes-interface/api-entities\";\nimport ProblemAPIHandler, { ProblemHandlerInterface } from \"../../classes-interface/problemhandler\";\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\nimport ProblemItem from \"../children/problem-item\";\n\nexport default function ProblemView(){\n\n    // const problemList: Problem[] = [\n    //     {id: \"aa9cc399-a64b-4a10-b6ed-4f4aca673e9f\",\n    //     desc: \"Test Problem!\",\n    //     submittedTime: 1644428469371,\n    //     status: \"Unreviewed\",\n    //     photoLink: \"https://projstorage0.blob.core.windows.net/images/24026990290640815-Receipt.jpg\"},\n    //     {id: \"aa9cc399-a64b-4a10-b6ed-4f4aca673e88\",\n    //     desc: \"Test Problem1!\",\n    //     submittedTime: 1644428469372,\n    //     status: \"Unreviewed\"}\n    // ]\n\n    const [problemList, setProblemList] = useState([]);\n\n    const handler: ProblemHandlerInterface = new ProblemAPIHandler(true);\n\n    useEffect(()=>{setter()},[]);\n\n    async function setter(){\n        const response: Problem[] = await handler.getAllProblems();\n        const pendingProblems: Problem[] = response.filter(p => p.status === \"Unreviewed\"); \n        setProblemList(pendingProblems);\n    }\n\n    const problemItems = problemList.map(p => <ProblemItem key={p.id} {...p}/>)\n\n    return(<View>\n        <BasicText text={'Current Problems'}/>\n\n        <ScrollView>\n            {problemItems}\n        </ScrollView>\n\n    </View>)\n}","import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { ServiceRequest } from \"./api-entities\";\nimport { appContext } from \"./app-conext\";\n\n\nexport enum sortType {\n   Ordered ,\n   Processing,\n   Completed ,\n   Cancelled,\n   All\n}\n\nexport interface RoomServiceHandlerInterface{\n    /**sorting by type! All, completed, processing, ordered, canceled*/\n    getAllRequest(type:sortType): Promise<ServiceRequest[]>\n    markAsProcessed(id:string): Promise<ServiceRequest>\n    markAsCompleted(id:string) : Promise<ServiceRequest>\n}\n\nexport default class RoomServiceHandlerAPIHandler implements RoomServiceHandlerInterface{\n    /////////////////////////////////////////////\n    private useURL:string = \"http://20.124.74.192:3000\";\n    private devMode:boolean = false;\n    private IndexURL =0;\n    //constructor\n    constructor(dev:boolean = false, IndexURL=1){\n        this.devMode=dev;\n        this.IndexURL=IndexURL\n    }\n    //////////////////////////////////////////////\n\n    /**this function returns the URL to work with, if devMod is set to false, \n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\n    private getURL(){\n        if(!this.devMode){ return this.useURL} //postman mock\n        else return \"https://a7168249-c922-4d0c-b90a-f3738cc27afa.mock.pstmn.io\"\n\n    }\n    \n    async getAllRequest(type: sortType) {\n        const response = await axios.get(this.getURL()+\"/servicerequests\");\n        const data:ServiceRequest[] = response.data;\n        if(type == sortType.All){\n            return data;\n        }else{\n            let newData:ServiceRequest[] = [];\n            for(let i=0; i<data.length; i++){\n                if(data[i].status == sortType[type]){\n                    newData.push(data[i]);\n                }\n            }\n            return newData;\n        }\n    }\n\n    async markAsProcessed(id:string) {\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\n            status: \"Processing\"\n        });\n        const data:ServiceRequest = response.data;\n        return data;\n    }\n    async markAsCompleted(id:string) {\n        const response = await axios.put(this.getURL()+\"/servicerequests/\"+id, {\n            status: \"Completed\"\n        });\n        const data:ServiceRequest = response.data;\n        return data;\n    }\n\n}\n\n\nexport const httpHandler1 = new  RoomServiceHandlerAPIHandler(false, 1);","import React, { useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Offering, ServiceRequest } from \"../../classes-interface/api-entities\";\nimport RoomServiceHandlerAPIHandler from \"../../classes-interface/room-service-handler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\n\n\n\n\nexport default function RoomServiceRequest(props){\n    const initServiceRequest:ServiceRequest = props.serviceRequest\n    const [serviceRequest, setServiceRequest] = useState(initServiceRequest)\n\n\n    const handler = new RoomServiceHandlerAPIHandler()\n    \n\n    function SwitchButtonDisplay(){\n        if(serviceRequest.status == \"Ordered\" )          return <BasicButton title={' Start Order'} onPress={()=>{ /*handler.markAsProcessed(serviceRequest.id);*/ }} />\n        else if(serviceRequest.status ==  \"Processing\" ) return <BasicButton title={' Mark order as complete'} onPress={()=>{ /*handler.markAsCompleted(serviceRequest.id);*/ }} />\n        else                                             return <></>\n    }\n\n    function SwitchStatusDisplay(){\n        return(<View style={{flexDirection:\"row\"}}>\n            <BasicText text={\"Status\"}/><BasicText text={serviceRequest?.status ?? \"Ordered\"}/><SwitchButtonDisplay/>\n        </View>)\n    }\n\n    function GetOfferingString(){\n        let tempString:string= '';\n        try {\n            if(serviceRequest.requestedOffering?.length <1){return 'In valid request in the system'}\n            for(let i =0; i < serviceRequest.requestedOffering.length; i ++){\n                if(i==0){tempString+= `\\t-${serviceRequest.requestedOffering[i].desc}`;}\n                else{tempString+= `\\n\\t-${serviceRequest.requestedOffering[i].desc}`;}\n            }\n            if(!tempString) return 'In valid request in the system'\n            return 'Hello'\n        } catch (error) {\n            return 'In valid request in the system'\n        }\n    }\n\n\n    function RequestDisplay(){\n        const dateDisplay = (new Date(serviceRequest.created))\n        return(\n        <>\n            <BasicText text={`Room: ${serviceRequest.room}`}/>\n            <BasicText text={`Created: ${dateDisplay.toDateString()}, at ${dateDisplay.toLocaleTimeString()}`}/>\n            <View><BasicText text={'Requested Offerings:'}/><BasicText text={GetOfferingString()}/></View>\n            <SwitchStatusDisplay/>\n        </>)\n    }\n\n    return(\n    <>\n        <BasicModal openTitle ={(props?.openTitle ?? \"null open title\")} child={<RequestDisplay/>}/>\n    </>)\n}","import React, { useEffect, useState } from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport { v4 } from \"uuid\";\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\nimport RoomServiceRequest from \"../children/room-service-request\";\nimport {Offering, ServiceRequest} from '../../classes-interface/api-entities';\nimport RoomServiceHandlerAPIHandler, { sortType } from \"../../classes-interface/room-service-handler\";\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\n\n\n\n\nexport default function RoomService(){\n\n    const dummyArray:ServiceRequest[] = []\n    const [data, setData] = useState(dummyArray);\n    const [sort, setSort] = useState(sortType.All)\n    const handler = new RoomServiceHandlerAPIHandler(true)\n    \n\n    useEffect(() => {\n        grabServiceRequest(sortType.All)\n    \n      return () => {\n        \n      }\n    }, [])\n    \n\n\n    \n\n\n    async function grabServiceRequest(type:sortType){\n    try {\n            const foundRequest = await handler.getAllRequest(type);\n            console.log(foundRequest)\n            if(foundRequest) {setData([]);setData(foundRequest);setSort(type)}\n        } catch (error) {\n            console.log('Failed to sort request')\n        }\n    }\n\n   function DisplaySortType(){\n       return <BasicText text={`Filtering Type: ${sortType[sort]}`}/>\n   }\n\n   function FilterButtons(){\n    return <View style={{flexDirection:\"row\"}}>\n        <BasicButton title={'All'} onPress={()=> grabServiceRequest(sortType.All)} />\n        <BasicButton title={'Ordered'} onPress={()=> grabServiceRequest(sortType.Ordered)} />\n        <BasicButton title={'Processing'} onPress={()=> grabServiceRequest(sortType.Processing)} />\n        <BasicButton title={'Complete'} onPress={()=> grabServiceRequest(sortType.Completed)} />\n        <BasicButton title={'Cancelled'} onPress={()=> grabServiceRequest(sortType.Cancelled)} />\n    </View>\n   }\n\n   \n/*       function Testing(){\n        let testStack:ServiceRequest[] =[]\n        for(let i =0; i <10; i++ ){\n            let dummyOffering:Offering={\n                desc: \"Testing\",\n                cost: 0\n            }\n            const T = \"Completed\"\n            let dummy:ServiceRequest = {\n                id: `EXRoom${i}`,\n                room: `EXRoom${i}`,\n                created: (Math.random()*100000000),\n                status: T ,\n                requestedOffering: [dummyOffering,dummyOffering,dummyOffering]\n            }\n\n            testStack.push( dummy )\n        }\n        setData(testStack);\n    } */\n\n    function DisplaySwitch(){\n        if(data?.length >0){\n            return <FlatList\n            data={data}\n            keyExtractor={(item) => v4()}\n            renderItem={({ item }) => { return (<RoomServiceRequest  openTitle = {`Room: ${item?.room ?? 'Invalid'}, ${item?.status ?? 'Invalid'}`} serviceRequest={item}    /> ); } }\n        />\n        }\n        else return <BasicText text={`No request found for ${sortType[sort]}`}/>\n    }\n    //grabServiceRequest(sort)\n\n    return(\n    <View>\n        <BasicText text={\"Room Service Request\"}/>\n        <DisplaySortType/>\n        <FilterButtons />\n        <BasicButton title={'Refresh'} onPress={()=>{grabServiceRequest(sort)}} />\n        <DisplaySwitch />\n        \n\n\n    </View>)\n}\n","import { useEffect, useState } from \"react\"\nimport { View } from \"react-native\"\nimport { Employee, WorkLog } from \"../../classes-interface/api-entities\"\nimport employeeAPIHandler, { EmployeeHandlerInterface } from \"../../classes-interface/employeehandler\"\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\"\nimport { GetDateFromNum } from \"../children/event-date-formatting\"\n\nexport default function ViewEmployeeStatus(){\n    //get employee statuses\n    //prepare render list worklogs\n    const handler: EmployeeHandlerInterface = new employeeAPIHandler(true)\n    const [worklogsState, setWorkLogs] = useState<WorkLog[]>([])\n    useEffect(()=>{GetWorkLogs()}, [])\n\n    async function GetWorkLogs(){\n        //const worklogs = await handler.getWorklogs()\n        //console.log(worklogs)\n        //setWorkLogs(worklogs)\n        const dummyWorklogs: WorkLog[] = [{wId: 123, type: 'CHECKOUT', timestamp: 1230}, {wId: 456, type: 'CHEKIN', timestamp: 9994063236}]\n        setWorkLogs(dummyWorklogs)\n    }\n\n    function LinkEmployee(worklogID: number){\n        const dummyEmployee: Employee[] = [{id: 123,isManager: false,fname: 'dude',lname: 'bro',username: 'yoyoyo',password: 'hmm'}]\n        const employee: Employee = dummyEmployee.find((employee)=>{return(employee.id === worklogID)}) //must have return in order to work\n        console.log(\"employee\", employee)\n        if(!employee) return \"no name found\" //in case no match is made\n        else return(employee.fname)\n    }\n\n    function PreparedWorkLogs(){\n        console.log('worklog state',worklogsState)\n        const loglist = worklogsState.map((worklog, key)=>{return<BasicText key={key} text={`NAME: ${LinkEmployee(worklog.wId)}\\nSTATUS: ${worklog.type}\\nTIMESTAMP: ${GetDateFromNum(worklog.timestamp)}\\n\\n`}/>})\n        //console.log(loglist)\n        return (<View>{loglist}</View>)\n    }\n\n    return(<>  \n        <BasicText text={'EMPLOYEE WORK LOGS\\n\\n'}/>\n        <PreparedWorkLogs/>\n    </>)\n}","import React, { useState } from 'react';\nimport { SafeAreaView } from 'react-native';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Employee } from './classes-interface/api-entities';\nimport { appContext, AppContextInterface } from './classes-interface/app-conext';\nimport NavBar from './Components/children/nav-bar';\nimport ClockingScreen from './Components/pages/clocking';\nimport EventsPage from './Components/pages/events-page';\nimport LoginPage from './Components/pages/login';\nimport ProblemView from './Components/pages/problem-view';\nimport RoomService from './Components/pages/room-service';\nimport ViewEmployeeStatus from './Components/pages/view-employee-status';\nimport BasicText from './SafariSolaceStyleTools/basictext';\nimport { Theme } from './SafariSolaceStyleTools/colorstyle';\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\n\nexport default function App() {\n\n  const [theme, setTheme] = useState(Theme.default);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [clockStatus, setClockStatus] = useState(false)\n  const dummyEmployee:Employee = {id: 0,isManager: false,fname: '',lname: '',username: '',password: ''}\n  const [user, setUser] = useState(dummyEmployee)\n\n  const initContext:AppContextInterface = {\n    clockStatus: clockStatus,\n    setClockStatus: setClockStatus,\n    user: user,\n    setUser: setUser\n  }\n  const themeContextObject:ThemeContextInterface = {theme:theme,setTheme:setTheme}\n\n  function SwitchPage(){\n    switch(pageIndex){\n\n      //================================================================================================\n      case    /*login*/           0:{return (<><LoginPage setPage={setPageIndex}/></>)}\n      case    /*room service*/    1:{return (<><NavBar setPageIndex={setPageIndex}/><RoomService/></>)}\n      case    /*event*/           2:{return (<><NavBar setPageIndex={setPageIndex}/><EventsPage/></>)}\n      case    /*check in*/        3:{return (<><NavBar setPageIndex={setPageIndex}/><ClockingScreen/></>)}\n      case    /*status check*/    4:{return (<><NavBar setPageIndex={setPageIndex}/><ViewEmployeeStatus/></>)}\n      case    /*problem*/         5:{return (<><NavBar setPageIndex={setPageIndex}/><ProblemView/></>)}\n      //================================================================================================\n      case    /*kris*/            6:{return (<><EventsPage/></>)}\n      case    /*john*/            7:{return (<><RoomService/></>)}\n      case    /*brandon*/         8:{return (<><BasicText text={'brandon'}/></>)}\n      case    /*josh*/            9:{return (<><BasicText text={'josh'}/></>)} \n      default                      :{return (<><BasicText text={'Testing'}/></>)}\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <appContext.Provider value = {initContext}>\n        <themeContext.Provider value = { themeContextObject }>\n          <SafeAreaView>\n          <SwitchPage/>\n          </SafeAreaView>\n        </themeContext.Provider>\n      </appContext.Provider>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#444',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}